# EsCQRSQuestions Project Rules

## Project Structure and Naming Conventions

### Solution Structure
- Solution name: `EsCQRSQuestions`
- Project naming: `EsCQRSQuestions.[ProjectType]` (e.g., `EsCQRSQuestions.Domain`)
- Follow the structure outlined in the technical context document

### Code Organization
- Domain models in `EsCQRSQuestions.Domain`
- API and SignalR hub in `EsCQRSQuestions.ApiService`
- Blazor frontend in `EsCQRSQuestions.Web`
- Application host in `EsCQRSQuestions.AppHost`
- Service defaults in `EsCQRSQuestions.ServiceDefaults`

### Naming Conventions
- PascalCase for class names, properties, and public methods
- camelCase for private fields and local variables
- Use descriptive names that reflect domain concepts
- Prefix interfaces with "I" (e.g., `IQuestionRepository`)
- Suffix commands with "Command" (e.g., `CreateQuestionCommand`)
- Suffix events with the event name (e.g., `QuestionCreated`)
- Suffix projectors with "Projector" (e.g., `QuestionProjector`)
- Suffix read models with "ReadModel" (e.g., `QuestionSummaryReadModel`)

## Coding Patterns and Practices

### Event Sourcing with Sekiban
- Each aggregate is a separate class inheriting from Sekiban's aggregate base class
- Events are immutable records of state changes
- Commands are requests to change state
- Follow Sekiban's conventions for event and command handling
- Use projections to create read models from events

### CQRS Implementation
- Separate command and query responsibilities
- Commands change state but return no data
- Queries return data but don't change state
- Use different models for writing and reading

### SignalR Integration
- Use the hub pattern for real-time communication
- Group clients by role (admin or participant)
- Broadcast events to relevant groups
- Handle reconnection scenarios gracefully

### Blazor Component Design
- Create reusable components for common UI elements
- Use parameters for component configuration
- Implement proper state management
- Follow Blazor lifecycle methods

## Development Workflow

### Version Control
- Use Git for version control
- Commit frequently with descriptive messages
- Use feature branches for new functionality
- Merge to main branch when features are complete

### Testing
- Write unit tests for domain logic
- Test event sourcing behavior
- Verify projections produce correct read models
- Test SignalR integration

### Documentation
- Update memory bank files as the project progresses
- Document key design decisions
- Maintain clear API documentation
- Update progress tracking regularly

## Technical Implementation Details

### Question Aggregate
- Central aggregate in the system
- Contains question text, options, and responses
- Manages the display state (started/stopped)
- Validates commands before generating events
- Access aggregate payload using `GetValue()` to unwrap ResultBox objects

### SignalR Integration
- Use `IHttpMessageHandlerFactory` directly from Microsoft.Extensions.Http for SignalR client integration
- Configure CORS in the API service to allow connections from the frontend application
- Use the correct URL format for the SignalR hub connection in Blazor components

### Event Types
- `QuestionCreated`: Initial creation of a question
- `QuestionUpdated`: Modification of question text or options
- `QuestionDisplayStarted`: Question made visible to participants
- `QuestionDisplayStopped`: Question hidden from participants
- `ResponseAdded`: Participant submitted a response

### Command Types
- `CreateQuestionCommand`: Create a new question with options
- `UpdateQuestionCommand`: Modify an existing question
- `StartDisplayCommand`: Make a question visible to participants
- `StopDisplayCommand`: Hide a question from participants
- `AddResponseCommand`: Submit a response to a question

### Read Models
- `QuestionSummaryReadModel`: Basic information about questions
- `ActiveQuestionReadModel`: Currently displayed question
- `QuestionStatisticsReadModel`: Aggregated response data
- `ParticipantResponseReadModel`: Individual participant responses

## UI/UX Guidelines

### Admin Page (/planning)
- Hidden from navigation bar
- Focused on question management and statistics
- Clear controls for starting/stopping question display
- Real-time updates of participant responses
- Accessible at https://localhost:7201/planning when running locally

### Participant Page (/questionair)
- Welcoming and intuitive
- Clear presentation of questions and options
- Simple form for submitting responses
- Feedback on submission success
- Accessible at https://localhost:7201/questionair when running locally

### General UI Principles
- Responsive design for different screen sizes
- Consistent color scheme and typography
- Clear feedback for user actions
- Graceful error handling

## Performance Considerations

### Event Sourcing Optimization
- Consider snapshots for frequently accessed aggregates
- Optimize event replay for large event streams
- Use efficient serialization for events

### SignalR Performance
- Manage connection state effectively
- Consider backplane for multi-server scenarios
- Implement reconnection logic

### Blazor Optimization
- Minimize component rendering
- Use efficient state management
- Optimize SignalR client usage

## Application URLs

When running the application using the Aspire host, the following URLs are available:

- **Frontend**: https://localhost:7201
  - Admin page: https://localhost:7201/planning
  - Participant page: https://localhost:7201/questionair

- **API Service**: https://localhost:7202

- **Aspire Dashboard**: https://localhost:17044

## Reference Implementation Notes

The MessageEachOther sample provides valuable reference for:
- SignalR hub implementation in `MessageEachOther.ApiService/Program.cs`
- Blazor integration in `MessageEachOther.Web/Components/Pages/Weather.razor`
- Event sourcing patterns in the domain model

Adapt these patterns to the EsCQRSQuestions domain while maintaining the same architectural approach.

## Common Issues and Solutions

### Accessing Aggregate Payload
- When accessing an aggregate payload from a command or query handler, use `GetValue()` to unwrap the ResultBox:
  ```csharp
  var aggregate = context.GetAggregate().GetValue();
  var payload = aggregate.Payload;
  ```

### SignalR Client Integration
- Use a custom interface for HTTP message handler factory to avoid conflicts with system interfaces:
  ```csharp
  public interface ICustomHttpMessageHandlerFactory
  {
      HttpMessageHandler CreateHandler();
  }
  ```
- Register the custom interface in the dependency injection container:
  ```csharp
  builder.Services.AddScoped<ICustomHttpMessageHandlerFactory, DefaultHttpMessageHandlerFactory>();
  ```

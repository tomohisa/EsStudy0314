@page "/planning"
@attribute [StreamRendering(true)]
@using Microsoft.AspNetCore.SignalR.Client
@using EsCQRSQuestions.AdminWeb.Components.Planning
@using EsCQRSQuestions.Domain.Aggregates.ActiveUsers.Queries
@using EsCQRSQuestions.Domain.Aggregates.Questions.Payloads
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using EsCQRSQuestions.Domain.Aggregates.QuestionGroups.Queries
@using EsCQRSQuestions.Domain.Projections.Questions
@using EsCQRSQuestions.AdminWeb.Models // Added using for shared models

@implements IAsyncDisposable

@inject QuestionApiClient QuestionApi
@inject QuestionGroupApiClient QuestionGroupApi
@inject ActiveUsersApiClient ActiveUsersApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager

<PageTitle>Question Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Question Management</h1>
    <ActiveUsersDisplay ActiveUsers="@activeUsers" />
</div>

<div class="row mb-4">
    <div class="col">
        <QuestionGroupList 
            Groups="groups" 
            SelectedGroupId="selectedGroupId" 
            OnGroupSelected="SelectGroup" 
            OnCreateGroupClicked="OpenCreateGroupModal" />
    </div>
</div>

@if (selectedGroupId.HasValue && groups?.Any() == true)
{
    <GroupQuestionsList 
        QuestionsInGroup="questionsInGroup" 
        GroupId="selectedGroupId.Value" 
        GroupName="@(groups?.FirstOrDefault(g => g.Id == selectedGroupId)?.Name ?? "Selected Group")" 
        GetResponseCount="GetResponseCountForQuestion" 
        GetQuestionOrderInGroup="GetQuestionOrderInGroup" 
        OnViewQuestion="ViewQuestionDetails" 
        OnEditQuestion="OpenEditQuestionModal" 
        OnStartDisplay="StartDisplayQuestion" 
        OnStopDisplay="StopDisplayQuestion" 
        OnDeleteQuestion="DeleteQuestion" 
        OnEditGroup="() => OpenEditGroupModal(selectedGroupId.Value)" 
        OnDeleteGroup="() => DeleteGroup(selectedGroupId.Value)" 
        OnAddQuestion="() => OpenCreateQuestionInGroupModal(selectedGroupId.Value)" 
        OnChangeQuestionOrder="HandleChangeQuestionOrder" />
}
else
{
    <div class="alert alert-info">
        <h4 class="alert-heading">No Group Selected</h4>
        <p>Please select or create a question group to manage questions.</p>
        <hr>
        <p class="mb-0">Questions must belong to a group to be properly organized and displayed.</p>
    </div>
}

@if (selectedQuestion is not null)
{
    <QuestionDetail 
        SelectedQuestion="selectedQuestion" 
        GetOptionText="GetOptionText" />
}

<!-- Note: @ref is removed as direct component interaction is replaced by JS interop -->
<QuestionFormModal 
                   IsEditMode="isEditMode" 
                   Model="questionModel" 
                   OnSave="SaveQuestion"
                   OnClose="CloseQuestionModal"
                   AvailableGroups="groups" /> 

<!-- Note: @ref is removed as direct component interaction is replaced by JS interop -->
<GroupFormModal 
                IsEditMode="isEditGroupMode" 
                Model="groupModel" 
                OnSave="SaveGroup"
                OnClose="CloseGroupModal" />

@code {
    private HubConnection? hubConnection;
    private List<QuestionListQuery.QuestionSummaryRecord>? questions;
    private List<QuestionsQuery.QuestionDetailRecord>? questionsWithGroupInfo;
    private QuestionDetailQuery.QuestionDetailRecord? selectedQuestion;
    private QuestionEditModel questionModel = new(); // Changed type to shared model
    private bool isEditMode = false;
    private Guid? editQuestionId;
    private ActiveUsersQuery.ActiveUsersRecord? activeUsers;
    private List<GetQuestionGroupsQuery.ResultRecord>? groups;
    private List<GetQuestionsByGroupIdQuery.ResultRecord>? questionsInGroup;
    private Guid? selectedGroupId;
    private GroupEditModel groupModel = new(); // Changed type to shared model
    private bool isEditGroupMode = false;
    private Guid? editGroupId;
    private readonly Guid activeUsersId = Guid.Parse("0195a6f7-dfff-75a7-b99f-36a0552a8eca");

    // Removed modal refs:
    // private QuestionFormModal? questionFormModal;
    // private GroupFormModal? groupFormModal;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrlWithClientFactory("https+http://apiservice/questionHub", HttpMessageHandlerFactory)
            .WithAutomaticReconnect(new[] { 
                TimeSpan.FromSeconds(1), 
                TimeSpan.FromSeconds(2), 
                TimeSpan.FromSeconds(5),
                TimeSpan.FromSeconds(10) 
            })
            .ConfigureLogging(logging => {
                logging.AddConsole();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.Closed += async (error) =>
        {
            Console.Error.WriteLine($"SignalR connection closed: {error?.Message}");
            Console.Error.WriteLine($"Connection state: {hubConnection?.State}");
            
            for (var i = 0; i < 5; i++)
            {
                try
                {
                    var retryDelay = Math.Min(1000 * Math.Pow(2, i), 30000);
                    Console.WriteLine($"Attempting reconnection in {retryDelay/1000} seconds...");
                    await Task.Delay((int)retryDelay);
                    
                    if (hubConnection is not null)
                    {
                        await hubConnection.StartAsync();
                        Console.WriteLine("SignalR connection restarted successfully");
                        
                        await hubConnection.InvokeAsync("JoinAdminGroup");
                        
                        await RefreshActiveUsers();
                        await RefreshQuestions();
                        await RefreshGroups();
                        
                        break;
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error during reconnection attempt {i+1}: {ex.Message}");
                    if (i == 4)
                    {
                        Console.Error.WriteLine("Failed to reconnect after multiple attempts");
                    }
                }
            }
        };

        hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"SignalR reconnecting... Error: {error?.Message}");
            Console.WriteLine($"Connection state: {hubConnection?.State}");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"SignalR reconnected with connection ID: {connectionId}");
            Console.WriteLine($"Connection state: {hubConnection?.State}");
            return Task.CompletedTask;
        };

        hubConnection.On<object>("ActiveUsersCreated", async (data) =>
        {
            try
            {
                Console.WriteLine($"ActiveUsersCreated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling ActiveUsersCreated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserConnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserConnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserConnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserDisconnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserDisconnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserDisconnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserNameUpdated", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserNameUpdated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserNameUpdated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("QuestionCreated", async _ =>
        {
            await RefreshQuestions();
            Console.WriteLine("Question created event received");
        });

        hubConnection.On<object>("QuestionUpdated", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStarted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStopped", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("ResponseAdded", async _ =>
        {
            // すべての質問の情報をリフレッシュして回答数を更新する
            Console.WriteLine("Response added event received - refreshing all questions");
            await RefreshQuestions();
            
            // 詳細ビューも更新（選択中の質問がある場合）
            if (selectedQuestion is not null) 
            {
                 await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDeleted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null && questions is not null && questions.All(q => q.QuestionId != selectedQuestion.QuestionId))
            {
                selectedQuestion = null;
            }
        });

        hubConnection.On<object>("QuestionGroupCreated", async _ =>
        {
            await RefreshGroups();
            Console.WriteLine("Question group created event received");
        });

        hubConnection.On<object>("QuestionGroupUpdated", async _ =>
        {
            await RefreshGroups();
            Console.WriteLine("Question group updated event received");
        });

        hubConnection.On<object>("QuestionGroupDeleted", async _ =>
        {
            await RefreshGroups();
            if (selectedGroupId is not null && groups is not null && groups.All(g => g.Id != selectedGroupId))
            {
                selectedGroupId = null;
                questionsInGroup = null;
            }
            Console.WriteLine("Question group deleted event received");
        });

        hubConnection.On<object>("QuestionAddedToGroup", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question added to group event received");
        });

        hubConnection.On<object>("QuestionRemovedFromGroup", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question removed from group event received");
        });

        hubConnection.On<object>("QuestionOrderChanged", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question order changed event received");
        });

        try
        {
            Console.WriteLine("Starting SignalR connection...");
            
            var timeoutTask = Task.Delay(TimeSpan.FromSeconds(30));
            var connectionTask = hubConnection.StartAsync();
            
            var completedTask = await Task.WhenAny(connectionTask, timeoutTask);
            
            if (completedTask == timeoutTask)
            {
                throw new TimeoutException("SignalR connection timed out after 30 seconds");
            }
            
            await connectionTask;
            
            Console.WriteLine($"SignalR connection established successfully. State: {hubConnection.State}");
            
            await hubConnection.InvokeAsync("JoinAdminGroup");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR connection: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }

        await RefreshQuestions();
        await RefreshActiveUsers();
        await RefreshGroups();
        
        // アプリ起動時に最初のグループを選択
        if (groups?.Any() == true && selectedGroupId == null)
        {
            selectedGroupId = groups.First().Id;
            await RefreshQuestionsInGroup();
            StateHasChanged();
            Console.WriteLine($"Auto-selected first group: {selectedGroupId}");
        }
    }

    private async Task RefreshActiveUsers()
    {
        try
        {
            Console.WriteLine($"Refreshing active users with ID {activeUsersId}...");
            activeUsers = await ActiveUsersApi.GetActiveUsersAsync(activeUsersId);
            Console.WriteLine($"Active users count: {activeUsers?.TotalCount ?? 0}");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active users: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }
    }
    
    private async Task RefreshQuestions()
    {
        try
        {
            Console.WriteLine("Refreshing questions...");
            // 旧APIを使用して互換性を維持
            var fetchedQuestions = await QuestionApi.GetQuestionsAsync();
            questions = fetchedQuestions.ToList();
            
            // 新しいMultiProjectorを使用したAPIも呼び出す
            var fetchedQuestionsWithGroupInfo = await QuestionApi.GetQuestionsWithGroupInfoAsync();
            questionsWithGroupInfo = fetchedQuestionsWithGroupInfo.ToList();
            
            Console.WriteLine($"Fetched {questions.Count} questions and {questionsWithGroupInfo.Count} questions with group info");
            await RefreshQuestionsInGroup();
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("State has changed");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing questions: {ex.Message}");
        }
    }

    private async Task RefreshQuestionsInGroup()
    {
        if (selectedGroupId.HasValue)
        {
            try {
                Console.WriteLine($"Refreshing questions in group {selectedGroupId.Value}...");
                questionsInGroup = await QuestionGroupApi.GetQuestionsInGroupAsync(selectedGroupId.Value);
                Console.WriteLine($"Fetched {questionsInGroup?.Count ?? 0} questions in group");
                await InvokeAsync(() => StateHasChanged());
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing questions in group: {ex.Message}");
                var groupId = selectedGroupId.Value;
                
                if (questions is not null)
                {
                    var matchingQuestions = new List<GetQuestionsByGroupIdQuery.ResultRecord>();
                    
                    foreach (var q in questions)
                    {
                        if (GetGroupName(q.QuestionId) == GetGroupName(groupId)) 
                        {
                            try
                            {
                                var detailedQuestion = await QuestionApi.GetQuestionByIdAsync(q.QuestionId);
                                if (detailedQuestion is not null)
                                {
                                    var options = detailedQuestion.Options
                                        .Select(o => new GetQuestionsByGroupIdQuery.QuestionOptionRecord(o.Id, o.Text))
                                        .ToList();
                                        
                                    matchingQuestions.Add(new GetQuestionsByGroupIdQuery.ResultRecord(
                                        q.QuestionId, 
                                        q.Text, 
                                        options,
                                        q.IsDisplayed,
                                        groupId));
                                }
                            }
                            catch (Exception optionEx)
                            {
                                Console.Error.WriteLine($"Error getting detailed question: {optionEx.Message}");
                            }
                        }
                    }
                    
                    questionsInGroup = matchingQuestions;
                }
                else
                {
                    questionsInGroup = new List<GetQuestionsByGroupIdQuery.ResultRecord>();
                }
            }
        }
        else
        {
            questionsInGroup = null;
        }
    }

    private async Task RefreshSelectedQuestion()
    {
        try
        {
            if (selectedQuestion is not null)
            {
                Console.WriteLine($"Refreshing selected question {selectedQuestion.QuestionId}...");
                selectedQuestion = await QuestionApi.GetQuestionByIdAsync(selectedQuestion.QuestionId);
                Console.WriteLine("Selected question refreshed");
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("State has changed for selected question");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing selected question: {ex.Message}");
        }
    }

    private async Task RefreshGroups()
    {
        try
        {
            Console.WriteLine("Refreshing groups...");
            groups = await QuestionGroupApi.GetGroupsAsync();
            Console.WriteLine($"Fetched {groups?.Count ?? 0} groups");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing groups: {ex.Message}");
        }
    }

    private async Task ViewQuestionDetails(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Viewing question details for {questionId}...");
            selectedQuestion = await QuestionApi.GetQuestionByIdAsync(questionId);
            Console.WriteLine("Question details loaded");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error viewing question details: {ex.Message}");
        }
    }

    // --- Modal Control using JavaScript Interop ---
    private async Task ShowModal(string modalId)
    {
        try {
            await JsRuntime.InvokeVoidAsync("eval", $"new bootstrap.Modal(document.getElementById('{modalId}')).show()");
        } catch (Exception ex) {
            Console.Error.WriteLine($"Error showing modal {modalId}: {ex.Message}");
        }
    }

    private async Task HideModal(string modalId)
    {
        try {
            // モーダルを強制的に閉じるための直接的なJavaScriptコード
            await JsRuntime.InvokeVoidAsync("eval", @"
                (function() {
                    console.log('Attempting to close modal: #" + modalId + @"');
                    
                    // 方法1: Bootstrap 5のAPIを使用
                    try {
                        var modalElement = document.getElementById('" + modalId + @"');
                        console.log('Modal element:', modalElement);
                        if (modalElement) {
                            var bsModal = bootstrap.Modal.getInstance(modalElement);
                            console.log('Bootstrap modal instance:', bsModal);
                            if (bsModal) {
                                bsModal.hide();
                                console.log('Modal hidden via Bootstrap API');
                            }
                        }
                    } catch (e) {
                        console.error('Error using Bootstrap API:', e);
                    }

                    // 方法2: DOMから直接モーダル要素を非表示に
                    try {
                        var modalEl = document.getElementById('" + modalId + @"');
                        if (modalEl) {
                            modalEl.style.display = 'none';
                            modalEl.classList.remove('show');
                            modalEl.setAttribute('aria-hidden', 'true');
                            modalEl.removeAttribute('aria-modal');
                            modalEl.removeAttribute('role');
                            console.log('Modal hidden via direct DOM manipulation');
                        }
                    } catch (e) {
                        console.error('Error manipulating modal element:', e);
                    }

                    // 方法3: モーダル背景の削除
                    try {
                        var backdrops = document.getElementsByClassName('modal-backdrop');
                        console.log('Backdrop elements found:', backdrops.length);
                        while (backdrops.length > 0) {
                            backdrops[0].parentNode.removeChild(backdrops[0]);
                        }
                        console.log('Backdrops removed');
                    } catch (e) {
                        console.error('Error removing backdrops:', e);
                    }

                    // 方法4: bodyからモーダル関連のクラスとスタイルを削除
                    try {
                        document.body.classList.remove('modal-open');
                        document.body.style.overflow = '';
                        document.body.style.paddingRight = '';
                        console.log('Body styles reset');
                    } catch (e) {
                        console.error('Error resetting body styles:', e);
                    }

                    console.log('All modal close operations attempted');
                })();
            ");
            
            // StateHasChangedを呼び出してUIを更新
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine($"Modal {modalId} close attempt completed");
        } catch (Exception ex) {
            Console.Error.WriteLine($"Error hiding modal {modalId}: {ex.Message}");
            try {
                // 最終手段: ページをリロード
                Console.WriteLine("Attempting page reload as last resort");
                await JsRuntime.InvokeVoidAsync("eval", "window.location.reload();");
            } catch (Exception reloadEx) {
                Console.Error.WriteLine($"Even page reload failed: {reloadEx.Message}");
            }
        }
    }
    
    private async Task ShowQuestionModal() => await ShowModal("questionModal");
    private async Task CloseQuestionModal() => await HideModal("questionModal");
    private async Task ShowGroupModal() => await ShowModal("groupModal");
    private async Task CloseGroupModal() => await HideModal("groupModal");
    // --- End Modal Control ---


    private async Task OpenCreateQuestionModal()
    {
        // グループが選択されていない場合は処理を中止
        if (!selectedGroupId.HasValue)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please select a question group first.");
            return;
        }

        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionEditModel
        {
            QuestionGroupId = selectedGroupId.Value, // 現在選択されているグループを強制的に設定
            Options = new List<QuestionOptionEditModel>
            {
                new QuestionOptionEditModel { Id = "1", Text = "" },
                new QuestionOptionEditModel { Id = "2", Text = "" }
            }
        };
        await ShowQuestionModal();
    }

    private async Task OpenCreateQuestionInGroupModal(Guid groupId)
    {
        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionEditModel // Changed type to shared model
        {
            QuestionGroupId = groupId,
            Options = new List<QuestionOptionEditModel> // Changed type to shared model
            {
                new QuestionOptionEditModel { Id = "1", Text = "" }, // Changed type to shared model
                new QuestionOptionEditModel { Id = "2", Text = "" } // Changed type to shared model
            }
        };
        await ShowQuestionModal(); // Fixed
    }

    private async Task OpenEditQuestionModal(Guid questionId)
    {
        isEditMode = true;
        editQuestionId = questionId;
        
        var question = await QuestionApi.GetQuestionByIdAsync(questionId);
        if (question is not null)
        {
            // 質問が所属するグループを特定
            Guid questionGroupId = Guid.Empty;
            if (groups != null)
            {
                foreach (var group in groups)
                {
                    if (group.Questions.Any(q => q.QuestionId == questionId))
                    {
                        questionGroupId = group.Id;
                        break;
                    }
                }
            }
            
            questionModel = new QuestionEditModel
            {
                Text = question.Text,
                QuestionGroupId = questionGroupId, // グループIDを設定
                Options = question.Options.Select(o => new QuestionOptionEditModel { Id = o.Id, Text = o.Text }).ToList()
            };
            
            Console.WriteLine($"Editing question {questionId} in group {questionGroupId}");
            await ShowQuestionModal();
        }
    }

    private async Task SaveQuestion()
    {
        try
        {
            Console.WriteLine("Saving question...");
            var options = questionModel.Options.Select(o => new QuestionOption(o.Id, o.Text)).ToList();
            
            // デフォルトのグループIDを設定（モデルのグループIDが空の場合）
            var groupIdToUse = questionModel.QuestionGroupId != Guid.Empty 
                ? questionModel.QuestionGroupId 
                : (groups?.FirstOrDefault()?.Id ?? Guid.Parse("11111111-1111-1111-1111-111111111111"));
            
            Console.WriteLine($"Selected group for question: {groupIdToUse}");
            
            if (isEditMode && editQuestionId.HasValue)
            {
                // まず質問自体を更新
                await QuestionApi.UpdateQuestionAsync(editQuestionId.Value, questionModel.Text, options);
                Console.WriteLine("Question updated");
                
                // 次に質問のグループ所属を処理
                // グループを特定
                Guid currentGroupId = Guid.Empty;
                bool foundInGroup = false;
                
                if (groups != null)
                {
                    foreach (var group in groups)
                    {
                        if (group.Questions.Any(q => q.QuestionId == editQuestionId.Value))
                        {
                            currentGroupId = group.Id;
                            foundInGroup = true;
                            break;
                        }
                    }
                }
                
                // グループが変更された場合は移動処理
                if (selectedGroupId != currentGroupId)
                {
                    Console.WriteLine($"Moving question from group {currentGroupId} to {selectedGroupId}");
                    
                    if (foundInGroup && currentGroupId != Guid.Empty)
                    {
                        // まず古いグループから削除
                        await QuestionGroupApi.RemoveQuestionFromGroupAsync(currentGroupId, editQuestionId.Value);
                    }
                    
                    // 新しいグループに追加
                    if (selectedGroupId != Guid.Empty)
                    {
                        // 新しいグループの質問数を取得して最後に追加
                        int order = 0;
                        var groupQuestions = await QuestionGroupApi.GetQuestionsInGroupAsync(selectedGroupId ?? throw new ApplicationException("Group ID is null"));
                        if (groupQuestions != null)
                        {
                            order = groupQuestions.Count;
                        }
                        
                        await QuestionGroupApi.AddQuestionToGroupAsync(selectedGroupId.Value, editQuestionId.Value, order);
                    }
                }
            }
            else
            {
                // 新規質問作成 - groupIdToUse変数を使用
                await QuestionApi.CreateQuestionWithGroupAsync(questionModel.Text, options, groupIdToUse);
                Console.WriteLine($"Question created in group {groupIdToUse}");
            }
            
            // モーダルを閉じる
            await CloseQuestionModal();
            
            // データを更新
            await RefreshQuestions();
            await RefreshGroups();
            
            if (this.selectedGroupId.HasValue)
            {
                await RefreshQuestionsInGroup();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving question: {ex.Message}");
        }
    }

    private async Task StartDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Starting display for question {questionId}...");
            await QuestionApi.StartDisplayQuestionAsync(questionId);
            Console.WriteLine("Display started");
            
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting display: {ex.Message}");
        }
    }

    private async Task StopDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Stopping display for question {questionId}...");
            await QuestionApi.StopDisplayQuestionAsync(questionId);
            Console.WriteLine("Display stopped");
            
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping display: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(Guid questionId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this question?"))
        {
            try
            {
                Console.WriteLine($"Deleting question {questionId}...");
                await QuestionApi.DeleteQuestionAsync(questionId);
                Console.WriteLine("Question deleted");
                
                if (selectedQuestion?.QuestionId == questionId)
                {
                    selectedQuestion = null;
                }
                
                await RefreshQuestions();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting question: {ex.Message}");
            }
        }
    }

    private async Task OpenCreateGroupModal()
    {
        isEditGroupMode = false;
        editGroupId = null;
        groupModel = new GroupEditModel(); // Changed type to shared model
        await ShowGroupModal(); // Fixed
    }

    private async Task OpenEditGroupModal(Guid groupId)
    {
        isEditGroupMode = true;
        editGroupId = groupId;

        var group = groups?.FirstOrDefault(g => g.Id == groupId);
        if (group is not null)
        {
            groupModel = new GroupEditModel // Changed type to shared model
            {
                Name = group.Name
            };
            await ShowGroupModal(); // Fixed
        }
    }

    private async Task SaveGroup()
    {
        try
        {
            Console.WriteLine("Saving group...");
            if (isEditGroupMode && editGroupId.HasValue)
            {
                await QuestionGroupApi.UpdateGroupAsync(editGroupId.Value, groupModel.Name);
                Console.WriteLine("Group updated");
            }
            else
            {
                await QuestionGroupApi.CreateGroupAsync(groupModel.Name);
                Console.WriteLine("Group created");
            }

            await CloseGroupModal(); // Fixed

            await RefreshGroups();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving group: {ex.Message}");
        }
    }

    private async Task DeleteGroup(Guid groupId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this group?"))
        {
            try
            {
                Console.WriteLine($"Deleting group {groupId}...");
                await QuestionGroupApi.DeleteGroupAsync(groupId);
                Console.WriteLine("Group deleted");

                if (selectedGroupId == groupId)
                {
                    selectedGroupId = null;
                    questionsInGroup = null;
                }

                await RefreshGroups();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting group: {ex.Message}");
            }
        }
    }

    private async Task SelectGroup(Guid groupId)
    {
        Console.WriteLine($"Selecting group {groupId}...");
        selectedGroupId = groupId;
        selectedQuestion = null;
        await RefreshQuestionsInGroup();
        StateHasChanged();
    }

    private string GetOptionText(List<QuestionOption> options, string optionId)
    {
        return options?.FirstOrDefault(o => o.Id == optionId)?.Text ?? "Unknown";
    }

    // Fixed: Changed Guid? to Guid and removed null check
    private string GetGroupName(Guid? questionId) 
    {
        var group = groups?.FirstOrDefault(g => g.Questions.Any(qRef => qRef.QuestionId == questionId));
        return group?.Name ?? "No Group";
    }

    // Fixed: Correct implementation using Responses.Count
    private int GetResponseCountForQuestion(Guid questionId)
    {
        // If the currently selected detailed question matches the ID, return its response count.
        if (selectedQuestion?.QuestionId == questionId && selectedQuestion.Responses != null)
        {
            return selectedQuestion.Responses.Count(); // Use Responses.Count()
        }
        // Otherwise, we don't have the detailed data readily available without another API call.
        // Returning 0 for now, indicating no data available in the current view model.
        return 0; 
    }

    private int GetQuestionOrderInGroup(Guid questionId)
    {
        if (selectedGroupId == null || groups == null)
            return -1;
            
        var group = groups.FirstOrDefault(g => g.Id == selectedGroupId);
        if (group == null)
            return -1;
            
        var questionRef = group.Questions.FirstOrDefault(q => q.QuestionId == questionId);
        return questionRef != null ? questionRef.Order : -1;
    }

    private async Task HandleChangeQuestionOrder((Guid QuestionId, int NewOrder) args)
    {
        await ChangeQuestionOrder(args.QuestionId, args.NewOrder);
    }

    private async Task ChangeQuestionOrder(Guid questionId, int newOrder)
    {
        if (selectedGroupId == null || newOrder < 0)
            return;
            
        try
        {
            Console.WriteLine($"Changing order for question {questionId} to {newOrder}");
            await QuestionGroupApi.ChangeQuestionOrderAsync(selectedGroupId.Value, questionId, newOrder);
            
            await RefreshGroups();
            await RefreshQuestionsInGroup();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing question order: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Removed original nested classes as they are now in Models/QuestionEditModels.cs
}

@page "/planning"
@attribute [StreamRendering(true)]
@using Microsoft.AspNetCore.SignalR.Client
@using EsCQRSQuestions.AdminWeb.Components.Planning
@using EsCQRSQuestions.Domain.Aggregates.ActiveUsers.Queries
@using EsCQRSQuestions.Domain.Aggregates.Questions.Payloads
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using EsCQRSQuestions.Domain.Aggregates.QuestionGroups.Queries
@using EsCQRSQuestions.Domain.Projections.Questions
@using EsCQRSQuestions.AdminWeb.Models
@using EsCQRSQuestions.AdminWeb.Services

@implements IAsyncDisposable

@inject QuestionApiClient QuestionApi
@inject QuestionGroupApiClient QuestionGroupApi
@inject ActiveUsersApiClient ActiveUsersApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager
@inject QuestionHubService HubService

<PageTitle>Question Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Question Management</h1>
    <ActiveUsersDisplay ActiveUsers="@activeUsers" />
</div>

<div class="row mb-4">
    <div class="col">
        <QuestionGroupList 
            Groups="groups" 
            SelectedGroupId="selectedGroupId" 
            OnGroupSelected="SelectGroup" 
            OnCreateGroupClicked="OpenCreateGroupModal" />
    </div>
</div>

@if (groups?.Any() != true)
{
    <div class="alert alert-warning">
        <h4 class="alert-heading">No Question Groups Available</h4>
        <p>You need to create a question group first before adding questions.</p>
        <hr>
        <p class="mb-0">Click the "Create New Group" button above to get started.</p>
    </div>
}
else
{
    @if (selectedGroupId.HasValue)
    {
        <GroupQuestionsList 
            QuestionsInGroup="questionsInGroup" 
            GroupId="selectedGroupId.Value" 
            GroupName="@(groups.FirstOrDefault(g => g.Id == selectedGroupId)?.Name ?? "Selected Group")"
            UniqueCode="@(groups.FirstOrDefault(g => g.Id == selectedGroupId)?.UniqueCode ?? "")"
            GetResponseCount="GetResponseCountForQuestion" 
            GetQuestionOrderInGroup="GetQuestionOrderInGroup" 
            OnViewQuestion="ViewQuestionDetails" 
            OnEditQuestion="OpenEditQuestionModal" 
            OnStartDisplay="StartDisplayQuestion" 
            OnStopDisplay="StopDisplayQuestion" 
            OnDeleteQuestion="DeleteQuestion" 
            OnEditGroup="() => OpenEditGroupModal(selectedGroupId.Value)" 
            OnDeleteGroup="() => DeleteGroup(selectedGroupId.Value)" 
            OnAddQuestion="() => OpenCreateQuestionInGroupModal(selectedGroupId.Value)" 
            OnChangeQuestionOrder="HandleChangeQuestionOrder" />
    }
    else
    {
        <div class="alert alert-info">
            <h4 class="alert-heading">No Group Selected</h4>
            <p>Please select a question group from the list above to manage questions.</p>
            <hr>
            <p class="mb-0">Questions must belong to a group to be properly organized and displayed.</p>
        </div>
    }
}

@if (selectedQuestion is not null)
{
    <QuestionDetail 
        SelectedQuestion="selectedQuestion" 
        GetOptionText="GetOptionText" />
}

<QuestionFormModal 
                   IsEditMode="isEditMode" 
                   Model="questionModel" 
                   OnSave="SaveQuestion"
                   OnClose="CloseQuestionModal"
                   AvailableGroups="groups" /> 

<GroupFormModal 
                IsEditMode="isEditGroupMode" 
                Model="groupModel" 
                OnSave="SaveGroup"
                OnClose="CloseGroupModal" />

@code {
    private List<QuestionListQuery.QuestionSummaryRecord>? questions;
    private List<QuestionsQuery.QuestionDetailRecord>? questionsWithGroupInfo;
    private QuestionDetailQuery.QuestionDetailRecord? selectedQuestion;
    private QuestionEditModel questionModel = new(); 
    private bool isEditMode = false;
    private Guid? editQuestionId;
    private ActiveUsersQuery.ActiveUsersRecord? activeUsers;
    private List<GetQuestionGroupsQuery.ResultRecord>? groups;
    private List<QuestionsQuery.QuestionDetailRecord>? questionsInGroup;
    private Guid? selectedGroupId;
    private GroupEditModel groupModel = new();
    private bool isEditGroupMode = false;
    private Guid? editGroupId;
    private readonly Guid activeUsersId = Guid.Parse("0195a6f7-dfff-75a7-b99f-36a0552a8eca");

    protected override async Task OnInitializedAsync()
    {
        // Set up event handlers for the hub service
        HubService.ActiveUsersChanged += RefreshActiveUsers;
        HubService.QuestionChanged += OnQuestionChanged;
        HubService.QuestionGroupChanged += OnQuestionGroupChanged;
        HubService.ResponseAdded += OnResponseAdded;
        
        // Initialize the hub connection
        await HubService.InitializeAsync();
        await HubService.JoinAdminGroup();
        
        // Load initial data
        await RefreshQuestions();
        await RefreshActiveUsers();
        await RefreshGroups();
        
        // Select first group if none selected
        if (groups?.Any() == true && selectedGroupId == null)
        {
            selectedGroupId = groups.First().Id;
            await RefreshQuestionsInGroup();
            StateHasChanged();
            Console.WriteLine($"Auto-selected first group: {selectedGroupId}");
        }
    }

    private async Task OnQuestionChanged()
    {
        await RefreshQuestions();
        if (selectedQuestion is not null)
        {
            await RefreshSelectedQuestion();
        }
    }

    private async Task OnQuestionGroupChanged() 
    {
        await RefreshGroups();
        await RefreshQuestionsInGroup();
    }

    private async Task OnResponseAdded()
    {
        Console.WriteLine("Response added event received - refreshing all questions");
        await RefreshQuestions();
        
        if (selectedQuestion is not null) 
        {
             await RefreshSelectedQuestion();
        }
    }

    private async Task RefreshActiveUsers()
    {
        try
        {
            Console.WriteLine($"Refreshing active users with ID {activeUsersId}...");
            activeUsers = await ActiveUsersApi.GetActiveUsersAsync(activeUsersId);
            Console.WriteLine($"Active users count: {activeUsers?.TotalCount ?? 0}");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active users: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }
    }
    
    private async Task RefreshQuestions()
    {
        try
        {
            Console.WriteLine("Refreshing questions...");
            // 旧APIを使用して互換性を維持
            var fetchedQuestions = await QuestionApi.GetQuestionsAsync();
            questions = fetchedQuestions.ToList();
            
            // 新しいMultiProjectorを使用したAPIも呼び出す
            var fetchedQuestionsWithGroupInfo = await QuestionApi.GetQuestionsWithGroupInfoAsync();
            questionsWithGroupInfo = fetchedQuestionsWithGroupInfo.ToList();
            
            Console.WriteLine($"Fetched {questions.Count} questions and {questionsWithGroupInfo.Count} questions with group info");
            await RefreshQuestionsInGroup();
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("State has changed");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing questions: {ex.Message}");
        }
    }

    private async Task RefreshQuestionsInGroup()
    {
        if (selectedGroupId.HasValue)
        {
            try {
                Console.WriteLine($"Refreshing questions in group {selectedGroupId.Value}...");
                var questionArray = await QuestionApi.GetQuestionsByGroupAsync(selectedGroupId.Value);
                questionsInGroup = questionArray.ToList(); // Convert array to List
                Console.WriteLine($"Fetched {questionsInGroup?.Count ?? 0} questions in group");
                await InvokeAsync(() => StateHasChanged());
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing questions in group: {ex.Message}");
                var groupId = selectedGroupId.Value;
                
                if (questionsWithGroupInfo is not null)
                {
                    // Filter questions by the selected group ID
                    questionsInGroup = questionsWithGroupInfo
                        .Where(q => q.QuestionGroupId == groupId)
                        .ToList();
                }
                else
                {
                    questionsInGroup = new List<QuestionsQuery.QuestionDetailRecord>();
                }
            }
        }
        else
        {
            questionsInGroup = null;
        }
    }

    private async Task RefreshSelectedQuestion()
    {
        try
        {
            if (selectedQuestion is not null)
            {
                Console.WriteLine($"Refreshing selected question {selectedQuestion.QuestionId}...");
                selectedQuestion = await QuestionApi.GetQuestionByIdAsync(selectedQuestion.QuestionId);
                Console.WriteLine("Selected question refreshed");
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("State has changed for selected question");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing selected question: {ex.Message}");
        }
    }

    private async Task RefreshGroups()
    {
        try
        {
            Console.WriteLine("Refreshing groups...");
            groups = await QuestionGroupApi.GetGroupsAsync();
            Console.WriteLine($"Fetched {groups?.Count ?? 0} groups");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing groups: {ex.Message}");
        }
    }

    private async Task ViewQuestionDetails(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Viewing question details for {questionId}...");
            selectedQuestion = await QuestionApi.GetQuestionByIdAsync(questionId);
            Console.WriteLine("Question details loaded");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error viewing question details: {ex.Message}");
        }
    }

    // --- Modal Control using JavaScript Interop ---
    private async Task ShowModal(string modalId)
    {
        try {
            await JsRuntime.InvokeVoidAsync("eval", $"new bootstrap.Modal(document.getElementById('{modalId}')).show()");
        } catch (Exception ex) {
            Console.Error.WriteLine($"Error showing modal {modalId}: {ex.Message}");
        }
    }

    private async Task HideModal(string modalId)
    {
        try {
            // モーダルを強制的に閉じるための直接的なJavaScriptコード
            await JsRuntime.InvokeVoidAsync("eval", @"
                (function() {
                    console.log('Attempting to close modal: #" + modalId + @"');
                    
                    // 方法1: Bootstrap 5のAPIを使用
                    try {
                        var modalElement = document.getElementById('" + modalId + @"');
                        console.log('Modal element:', modalElement);
                        if (modalElement) {
                            var bsModal = bootstrap.Modal.getInstance(modalElement);
                            console.log('Bootstrap modal instance:', bsModal);
                            if (bsModal) {
                                bsModal.hide();
                                console.log('Modal hidden via Bootstrap API');
                            }
                        }
                    } catch (e) {
                        console.error('Error using Bootstrap API:', e);
                    }

                    // 方法2: DOMから直接モーダル要素を非表示に
                    try {
                        var modalEl = document.getElementById('" + modalId + @"');
                        if (modalEl) {
                            modalEl.style.display = 'none';
                            modalEl.classList.remove('show');
                            modalEl.setAttribute('aria-hidden', 'true');
                            modalEl.removeAttribute('aria-modal');
                            modalEl.removeAttribute('role');
                            console.log('Modal hidden via direct DOM manipulation');
                        }
                    } catch (e) {
                        console.error('Error manipulating modal element:', e);
                    }

                    // 方法3: モーダル背景の削除
                    try {
                        var backdrops = document.getElementsByClassName('modal-backdrop');
                        console.log('Backdrop elements found:', backdrops.length);
                        while (backdrops.length > 0) {
                            backdrops[0].parentNode.removeChild(backdrops[0]);
                        }
                        console.log('Backdrops removed');
                    } catch (e) {
                        console.error('Error removing backdrops:', e);
                    }

                    // 方法4: bodyからモーダル関連のクラスとスタイルを削除
                    try {
                        document.body.classList.remove('modal-open');
                        document.body.style.overflow = '';
                        document.body.style.paddingRight = '';
                        console.log('Body styles reset');
                    } catch (e) {
                        console.error('Error resetting body styles:', e);
                    }

                    console.log('All modal close operations attempted');
                })();
            ");
            
            // StateHasChangedを呼び出してUIを更新
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine($"Modal {modalId} close attempt completed");
        } catch (Exception ex) {
            Console.Error.WriteLine($"Error hiding modal {modalId}: {ex.Message}");
            try {
                // 最終手段: ページをリロード
                Console.WriteLine("Attempting page reload as last resort");
                await JsRuntime.InvokeVoidAsync("eval", "window.location.reload();");
            } catch (Exception reloadEx) {
                Console.Error.WriteLine($"Even page reload failed: {reloadEx.Message}");
            }
        }
    }
    
    private async Task ShowQuestionModal() => await ShowModal("questionModal");
    private async Task CloseQuestionModal() => await HideModal("questionModal");
    private async Task ShowGroupModal() => await ShowModal("groupModal");
    private async Task CloseGroupModal() => await HideModal("groupModal");
    // --- End Modal Control ---

    private async Task OpenCreateQuestionModal()
    {
        // グループが選択されていない場合は処理を中止
        if (!selectedGroupId.HasValue)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please select a question group first.");
            return;
        }

        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionEditModel
        {
            QuestionGroupId = selectedGroupId.Value, // 現在選択されているグループを強制的に設定
            Options = new List<QuestionOptionEditModel>
            {
                new QuestionOptionEditModel { Id = "1", Text = "" },
                new QuestionOptionEditModel { Id = "2", Text = "" }
            }
        };
        await ShowQuestionModal();
    }

    private async Task OpenCreateQuestionInGroupModal(Guid groupId)
    {
        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionEditModel 
        {
            QuestionGroupId = groupId,
            Options = new List<QuestionOptionEditModel> 
            {
                new QuestionOptionEditModel { Id = "1", Text = "" }, 
                new QuestionOptionEditModel { Id = "2", Text = "" } 
            }
        };
        await ShowQuestionModal(); 
    }

    private async Task OpenEditQuestionModal(Guid questionId)
    {
        isEditMode = true;
        editQuestionId = questionId;
        
        var question = await QuestionApi.GetQuestionByIdAsync(questionId);
        if (question is not null)
        {
            // 質問が所属するグループを特定
            Guid questionGroupId = Guid.Empty;
            if (groups != null)
            {
                foreach (var group in groups)
                {
                    if (group.Questions.Any(q => q.QuestionId == questionId))
                    {
                        questionGroupId = group.Id;
                        break;
                    }
                }
            }
            
            questionModel = new QuestionEditModel
            {
                Text = question.Text,
                QuestionGroupId = questionGroupId, // グループIDを設定
                Options = question.Options.Select(o => new QuestionOptionEditModel { Id = o.Id, Text = o.Text }).ToList()
            };
            
            Console.WriteLine($"Editing question {questionId} in group {questionGroupId}");
            await ShowQuestionModal();
        }
    }

    private async Task SaveQuestion()
    {
        try
        {
            // グループIDが空の場合はエラーとする
            if (questionModel.QuestionGroupId == Guid.Empty)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Question group is required. Please select a group.");
                return;
            }
            
            Console.WriteLine("Saving question...");
            var options = questionModel.Options.Select(o => new QuestionOption(o.Id, o.Text)).ToList();
            
            var groupIdToUse = questionModel.QuestionGroupId;
            Console.WriteLine($"Selected group for question: {groupIdToUse}");
            
            if (isEditMode && editQuestionId.HasValue)
            {
                // まず質問自体を更新
                await QuestionApi.UpdateQuestionAsync(editQuestionId.Value, questionModel.Text, options);
                Console.WriteLine("Question updated");
                
                // 次に質問のグループ所属を処理
                // グループを特定
                Guid currentGroupId = Guid.Empty;
                bool foundInGroup = false;
                
                if (groups != null)
                {
                    foreach (var group in groups)
                    {
                        if (group.Questions.Any(q => q.QuestionId == editQuestionId.Value))
                        {
                            currentGroupId = group.Id;
                            foundInGroup = true;
                            break;
                        }
                    }
                }
                
                // グループが変更された場合は移動処理
                if (selectedGroupId != currentGroupId)
                {
                    Console.WriteLine($"Moving question from group {currentGroupId} to {selectedGroupId}");
                    
                    if (foundInGroup && currentGroupId != Guid.Empty)
                    {
                        // まず古いグループから削除
                        await QuestionGroupApi.RemoveQuestionFromGroupAsync(currentGroupId, editQuestionId.Value);
                    }
                    
                    // 新しいグループに追加
                    if (selectedGroupId != Guid.Empty)
                    {
                        // 新しいグループの質問数を取得して最後に追加
                        int order = 0;
                        var groupQuestions = await QuestionGroupApi.GetQuestionsInGroupAsync(selectedGroupId ?? throw new ApplicationException("Group ID is null"));
                        if (groupQuestions != null)
                        {
                            order = groupQuestions.Count;
                        }
                        
                        await QuestionGroupApi.AddQuestionToGroupAsync(selectedGroupId.Value, editQuestionId.Value, order);
                    }
                }
            }
            else
            {
                // 新規質問作成 - groupIdToUse変数を使用
                await QuestionApi.CreateQuestionWithGroupAsync(questionModel.Text, options, groupIdToUse);
                Console.WriteLine($"Question created in group {groupIdToUse}");
            }
            
            // モーダルを閉じる
            await CloseQuestionModal();
            
            // データを更新
            await RefreshQuestions();
            await RefreshGroups();
            
            if (this.selectedGroupId.HasValue)
            {
                await RefreshQuestionsInGroup();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving question: {ex.Message}");
        }
    }

    private async Task StartDisplayQuestion(Guid questionId)
    {
        try
        {
            var uniqueCode = groups?.FirstOrDefault(g => g.Id == selectedGroupId)?.UniqueCode ?? "";
            Console.WriteLine($"Starting display for question {questionId} (UniqueCode: {uniqueCode})...");
            
            if (string.IsNullOrWhiteSpace(uniqueCode))
            {
                await JsRuntime.InvokeVoidAsync("alert", "このグループにはUniqueCodeが設定されていません。グループを編集してUniqueCodeを自動生成してください。");
                return;
            }
            
            await HubService.StartDisplayQuestionForGroup(questionId, uniqueCode);
            Console.WriteLine($"Display started for question {questionId} with UniqueCode: {uniqueCode}");
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting display: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"質問の表示に失敗しました: {ex.Message}");
        }
    }

    private async Task StopDisplayQuestion(Guid questionId)
    {
        try
        {
            var uniqueCode = groups?.FirstOrDefault(g => g.Id == selectedGroupId)?.UniqueCode ?? "";
            Console.WriteLine($"Stopping display for question {questionId} (UniqueCode: {uniqueCode})...");
            
            if (string.IsNullOrWhiteSpace(uniqueCode))
            {
                await JsRuntime.InvokeVoidAsync("alert", "このグループにはUniqueCodeが設定されていません。グループを編集してUniqueCodeを自動生成してください。");
                return;
            }
            await HubService.StopDisplayQuestionForGroup(questionId, uniqueCode);
            Console.WriteLine($"Display stopped for question {questionId} with UniqueCode: {uniqueCode}");
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping display: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"質問の表示停止に失敗しました: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(Guid questionId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this question?"))
        {
            try
            {
                Console.WriteLine($"Deleting question {questionId}...");
                await QuestionApi.DeleteQuestionAsync(questionId);
                Console.WriteLine("Question deleted");
                
                if (selectedQuestion?.QuestionId == questionId)
                {
                    selectedQuestion = null;
                }
                
                await RefreshQuestions();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting question: {ex.Message}");
            }
        }
    }

    private async Task OpenCreateGroupModal()
    {
        isEditGroupMode = false;
        editGroupId = null;
        groupModel = new GroupEditModel();
        await ShowGroupModal(); 
    }

    private async Task OpenEditGroupModal(Guid groupId)
    {
        isEditGroupMode = true;
        editGroupId = groupId;

        var group = groups?.FirstOrDefault(g => g.Id == groupId);
        if (group is not null)
        {
            groupModel = new GroupEditModel
            {
                Name = group.Name
            };
            await ShowGroupModal();
        }
    }

    private async Task SaveGroup()
    {
        try
        {
            Console.WriteLine("Saving group...");
            if (isEditGroupMode && editGroupId.HasValue)
            {
                await QuestionGroupApi.UpdateGroupAsync(editGroupId.Value, groupModel.Name);
                Console.WriteLine("Group updated");
            }
            else
            {
                await QuestionGroupApi.CreateGroupAsync(groupModel.Name);
                Console.WriteLine("Group created");
            }

            await CloseGroupModal();

            await RefreshGroups();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving group: {ex.Message}");
        }
    }

    private async Task DeleteGroup(Guid groupId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this group?"))
        {
            try
            {
                Console.WriteLine($"Deleting group {groupId}...");
                await QuestionGroupApi.DeleteGroupAsync(groupId);
                Console.WriteLine("Group deleted");

                if (selectedGroupId == groupId)
                {
                    selectedGroupId = null;
                    questionsInGroup = null;
                }

                await RefreshGroups();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting group: {ex.Message}");
            }
        }
    }

    private async Task SelectGroup(Guid groupId)
    {
        Console.WriteLine($"Selecting group {groupId}...");
        selectedGroupId = groupId;
        selectedQuestion = null;
        await RefreshQuestionsInGroup();
        StateHasChanged();
    }

    private string GetOptionText(List<QuestionOption> options, string optionId)
    {
        return options?.FirstOrDefault(o => o.Id == optionId)?.Text ?? "Unknown";
    }

    private string GetGroupName(Guid? questionId) 
    {
        var group = groups?.FirstOrDefault(g => g.Questions.Any(qRef => qRef.QuestionId == questionId));
        return group?.Name ?? "No Group";
    }

    private int GetResponseCountForQuestion(Guid questionId)
    {
        if (selectedQuestion?.QuestionId == questionId && selectedQuestion.Responses != null)
        {
            return selectedQuestion.Responses.Count(); 
        }
        return 0; 
    }

    private int GetQuestionOrderInGroup(Guid questionId)
    {
        if (selectedGroupId == null || groups == null)
            return -1;
            
        var group = groups.FirstOrDefault(g => g.Id == selectedGroupId);
        if (group == null)
            return -1;
            
        var questionRef = group.Questions.FirstOrDefault(q => q.QuestionId == questionId);
        return questionRef != null ? questionRef.Order : -1;
    }

    private async Task HandleChangeQuestionOrder((Guid QuestionId, int NewOrder) args)
    {
        await ChangeQuestionOrder(args.QuestionId, args.NewOrder);
    }

    private async Task ChangeQuestionOrder(Guid questionId, int newOrder)
    {
        if (selectedGroupId == null || newOrder < 0)
            return;
            
        try
        {
            Console.WriteLine($"Changing order for question {questionId} to {newOrder}");
            await QuestionGroupApi.ChangeQuestionOrderAsync(selectedGroupId.Value, questionId, newOrder);
            
            await RefreshGroups();
            await RefreshQuestionsInGroup();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing question order: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events
        HubService.ActiveUsersChanged -= RefreshActiveUsers;
        HubService.QuestionChanged -= OnQuestionChanged;
        HubService.QuestionGroupChanged -= OnQuestionGroupChanged;
        HubService.ResponseAdded -= OnResponseAdded;
    }
}

@page "/planning"
@attribute [StreamRendering(true)]

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using EsCQRSQuestions.AdminWeb
@using EsCQRSQuestions.AdminWeb.Components.Planning
@using EsCQRSQuestions.Domain.Aggregates.ActiveUsers.Queries
@using EsCQRSQuestions.Domain.Aggregates.Questions.Payloads
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using EsCQRSQuestions.Domain.Aggregates.QuestionGroups.Queries
@using EsCQRSQuestions.Domain.Workflows

@implements IAsyncDisposable

@inject QuestionApiClient QuestionApi
@inject QuestionGroupApiClient QuestionGroupApi
@inject ActiveUsersApiClient ActiveUsersApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager

<PageTitle>Question Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Question Management</h1>
    <ActiveUsersDisplay ActiveUsersCount="@(activeUsers?.TotalCount ?? 0)" />
</div>

<div class="row mb-4">
    <div class="col">
        <QuestionGroupList 
            Groups="groups" 
            SelectedGroupId="selectedGroupId" 
            OnGroupSelected="SelectGroup" 
            OnCreateGroup="OpenCreateGroupModal" />
    </div>
</div>

@if (selectedGroupId.HasValue)
{
    <GroupQuestionsList 
        QuestionsInGroup="questionsInGroup" 
        GroupId="selectedGroupId.Value" 
        GroupName="@(groups?.FirstOrDefault(g => g.Id == selectedGroupId)?.Name ?? "")" 
        GetResponseCount="GetResponseCountForQuestion" 
        GetQuestionOrderInGroup="GetQuestionOrderInGroup" 
        OnViewQuestion="ViewQuestionDetails" 
        OnEditQuestion="OpenEditQuestionModal" 
        OnStartDisplay="StartDisplayQuestion" 
        OnStopDisplay="StopDisplayQuestion" 
        OnDeleteQuestion="DeleteQuestion" 
        OnEditGroup="() => OpenEditGroupModal(selectedGroupId.Value)" 
        OnDeleteGroup="() => DeleteGroup(selectedGroupId.Value)" 
        OnAddQuestion="() => OpenCreateQuestionInGroupModal(selectedGroupId.Value)" 
        OnChangeQuestionOrder="HandleChangeQuestionOrder" />
}
else
{
    <AllQuestionsList 
        Questions="questions" 
        GetGroupName="GetGroupName" 
        OnViewQuestion="ViewQuestionDetails" 
        OnEditQuestion="OpenEditQuestionModal" 
        OnStartDisplay="StartDisplayQuestion" 
        OnStopDisplay="StopDisplayQuestion" 
        OnDeleteQuestion="DeleteQuestion" 
        OnCreateQuestion="OpenCreateQuestionModal" />
}

@if (selectedQuestion is not null)
{
    <QuestionDetail 
        SelectedQuestion="selectedQuestion" 
        GetOptionText="GetOptionText" />
}

<QuestionFormModal @ref="questionFormModal" 
                   IsEditMode="isEditMode" 
                   QuestionModel="questionModel" 
                   OnSave="SaveQuestion" />

<GroupFormModal @ref="groupFormModal" 
                IsEditMode="isEditGroupMode" 
                GroupModel="groupModel" 
                OnSave="SaveGroup" />

@code {
    private HubConnection? hubConnection;
    private List<QuestionListQuery.QuestionSummaryRecord>? questions;
    private QuestionDetailQuery.QuestionDetailRecord? selectedQuestion;
    private QuestionModel questionModel = new();
    private bool isEditMode = false;
    private Guid? editQuestionId;
    private ActiveUsersQuery.ActiveUsersRecord? activeUsers;
    private List<GetQuestionGroupsQuery.ResultRecord>? groups;
    private List<GetQuestionsByGroupIdQuery.ResultRecord>? questionsInGroup;
    private Guid? selectedGroupId;
    private GroupModel groupModel = new();
    private bool isEditGroupMode = false;
    private Guid? editGroupId;
    private readonly Guid activeUsersId = Guid.Parse("0195a6f7-dfff-75a7-b99f-36a0552a8eca");

    private QuestionFormModal? questionFormModal;
    private GroupFormModal? groupFormModal;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrlWithClientFactory("https+http://apiservice/questionHub", HttpMessageHandlerFactory)
            .WithAutomaticReconnect(new[] { 
                TimeSpan.FromSeconds(1), 
                TimeSpan.FromSeconds(2), 
                TimeSpan.FromSeconds(5),
                TimeSpan.FromSeconds(10) 
            })
            .ConfigureLogging(logging => {
                logging.AddConsole();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.Closed += async (error) =>
        {
            Console.Error.WriteLine($"SignalR connection closed: {error?.Message}");
            Console.Error.WriteLine($"Connection state: {hubConnection?.State}");
            
            for (var i = 0; i < 5; i++)
            {
                try
                {
                    var retryDelay = Math.Min(1000 * Math.Pow(2, i), 30000);
                    Console.WriteLine($"Attempting reconnection in {retryDelay/1000} seconds...");
                    await Task.Delay((int)retryDelay);
                    
                    if (hubConnection is not null)
                    {
                        await hubConnection.StartAsync();
                        Console.WriteLine("SignalR connection restarted successfully");
                        
                        await hubConnection.InvokeAsync("JoinAdminGroup");
                        
                        await RefreshActiveUsers();
                        await RefreshQuestions();
                        await RefreshGroups();
                        
                        break;
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error during reconnection attempt {i+1}: {ex.Message}");
                    if (i == 4)
                    {
                        Console.Error.WriteLine("Failed to reconnect after multiple attempts");
                    }
                }
            }
        };

        hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"SignalR reconnecting... Error: {error?.Message}");
            Console.WriteLine($"Connection state: {hubConnection?.State}");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"SignalR reconnected with connection ID: {connectionId}");
            Console.WriteLine($"Connection state: {hubConnection?.State}");
            return Task.CompletedTask;
        };

        hubConnection.On<object>("ActiveUsersCreated", async (data) =>
        {
            try
            {
                Console.WriteLine($"ActiveUsersCreated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling ActiveUsersCreated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserConnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserConnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserConnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserDisconnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserDisconnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserDisconnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserNameUpdated", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserNameUpdated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserNameUpdated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("QuestionCreated", async _ =>
        {
            await RefreshQuestions();
            Console.WriteLine("Question created event received");
        });

        hubConnection.On<object>("QuestionUpdated", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStarted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStopped", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("ResponseAdded", async _ =>
        {
            if (selectedQuestion is not null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDeleted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion is not null && questions is not null && questions.All(q => q.QuestionId != selectedQuestion.QuestionId))
            {
                selectedQuestion = null;
            }
        });

        hubConnection.On<object>("QuestionGroupCreated", async _ =>
        {
            await RefreshGroups();
            Console.WriteLine("Question group created event received");
        });

        hubConnection.On<object>("QuestionGroupUpdated", async _ =>
        {
            await RefreshGroups();
            Console.WriteLine("Question group updated event received");
        });

        hubConnection.On<object>("QuestionGroupDeleted", async _ =>
        {
            await RefreshGroups();
            if (selectedGroupId is not null && groups is not null && groups.All(g => g.Id != selectedGroupId))
            {
                selectedGroupId = null;
                questionsInGroup = null;
            }
            Console.WriteLine("Question group deleted event received");
        });

        hubConnection.On<object>("QuestionAddedToGroup", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question added to group event received");
        });

        hubConnection.On<object>("QuestionRemovedFromGroup", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question removed from group event received");
        });

        hubConnection.On<object>("QuestionOrderChanged", async _ =>
        {
            await RefreshGroups();
            await RefreshQuestionsInGroup();
            Console.WriteLine("Question order changed event received");
        });

        try
        {
            Console.WriteLine("Starting SignalR connection...");
            
            var timeoutTask = Task.Delay(TimeSpan.FromSeconds(30));
            var connectionTask = hubConnection.StartAsync();
            
            var completedTask = await Task.WhenAny(connectionTask, timeoutTask);
            
            if (completedTask == timeoutTask)
            {
                throw new TimeoutException("SignalR connection timed out after 30 seconds");
            }
            
            await connectionTask;
            
            Console.WriteLine($"SignalR connection established successfully. State: {hubConnection.State}");
            
            await hubConnection.InvokeAsync("JoinAdminGroup");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR connection: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }

        await RefreshQuestions();
        await RefreshActiveUsers();
        await RefreshGroups();
    }

    private async Task RefreshActiveUsers()
    {
        try
        {
            Console.WriteLine($"Refreshing active users with ID {activeUsersId}...");
            activeUsers = await ActiveUsersApi.GetActiveUsersAsync(activeUsersId);
            Console.WriteLine($"Active users count: {activeUsers?.TotalCount ?? 0}");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active users: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }
    }
    
    private async Task RefreshQuestions()
    {
        try
        {
            Console.WriteLine("Refreshing questions...");
            var fetchedQuestions = await QuestionApi.GetQuestionsAsync();
            questions = fetchedQuestions.ToList();
            Console.WriteLine($"Fetched {questions.Count} questions");
            await RefreshQuestionsInGroup();
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("State has changed");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing questions: {ex.Message}");
        }
    }

    private async Task RefreshQuestionsInGroup()
    {
        if (selectedGroupId.HasValue)
        {
            try {
                Console.WriteLine($"Refreshing questions in group {selectedGroupId.Value}...");
                questionsInGroup = await QuestionGroupApi.GetQuestionsInGroupAsync(selectedGroupId.Value);
                Console.WriteLine($"Fetched {questionsInGroup?.Count ?? 0} questions in group");
                await InvokeAsync(() => StateHasChanged());
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing questions in group: {ex.Message}");
                var groupId = selectedGroupId.Value;
                
                if (questions is not null)
                {
                    var matchingQuestions = new List<GetQuestionsByGroupIdQuery.ResultRecord>();
                    
                    foreach (var q in questions)
                    {
                        if (GetGroupName(q.QuestionId) == GetGroupName(groupId))
                        {
                            try
                            {
                                var detailedQuestion = await QuestionApi.GetQuestionByIdAsync(q.QuestionId);
                                if (detailedQuestion is not null)
                                {
                                    var options = detailedQuestion.Options
                                        .Select(o => new GetQuestionsByGroupIdQuery.QuestionOptionRecord(o.Id, o.Text))
                                        .ToList();
                                        
                                    matchingQuestions.Add(new GetQuestionsByGroupIdQuery.ResultRecord(
                                        q.QuestionId, 
                                        q.Text, 
                                        options,
                                        q.IsDisplayed,
                                        groupId));
                                }
                            }
                            catch (Exception optionEx)
                            {
                                Console.Error.WriteLine($"Error getting detailed question: {optionEx.Message}");
                            }
                        }
                    }
                    
                    questionsInGroup = matchingQuestions;
                }
                else
                {
                    questionsInGroup = new List<GetQuestionsByGroupIdQuery.ResultRecord>();
                }
            }
        }
        else
        {
            questionsInGroup = null;
        }
    }

    private async Task RefreshSelectedQuestion()
    {
        try
        {
            if (selectedQuestion is not null)
            {
                Console.WriteLine($"Refreshing selected question {selectedQuestion.QuestionId}...");
                selectedQuestion = await QuestionApi.GetQuestionByIdAsync(selectedQuestion.QuestionId);
                Console.WriteLine("Selected question refreshed");
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("State has changed for selected question");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing selected question: {ex.Message}");
        }
    }

    private async Task RefreshGroups()
    {
        try
        {
            Console.WriteLine("Refreshing groups...");
            groups = await QuestionGroupApi.GetGroupsAsync();
            Console.WriteLine($"Fetched {groups?.Count ?? 0} groups");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing groups: {ex.Message}");
        }
    }

    private async Task ViewQuestionDetails(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Viewing question details for {questionId}...");
            selectedQuestion = await QuestionApi.GetQuestionByIdAsync(questionId);
            Console.WriteLine("Question details loaded");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error viewing question details: {ex.Message}");
        }
    }

    private async Task OpenCreateQuestionModal()
    {
        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionModel
        {
            Options = new List<QuestionOptionModel>
            {
                new QuestionOptionModel { Id = "1", Text = "" },
                new QuestionOptionModel { Id = "2", Text = "" }
            }
        };
        if (questionFormModal is not null)
        {
            await questionFormModal.Show();
        }
    }

    private async Task OpenCreateQuestionInGroupModal(Guid groupId)
    {
        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionModel
        {
            QuestionGroupId = groupId,
            Options = new List<QuestionOptionModel>
            {
                new QuestionOptionModel { Id = "1", Text = "" },
                new QuestionOptionModel { Id = "2", Text = "" }
            }
        };
        if (questionFormModal is not null)
        {
            await questionFormModal.Show();
        }
    }

    private async Task OpenEditQuestionModal(Guid questionId)
    {
        isEditMode = true;
        editQuestionId = questionId;
        
        var question = await QuestionApi.GetQuestionByIdAsync(questionId);
        if (question is not null)
        {
            questionModel = new QuestionModel
            {
                Text = question.Text,
                Options = question.Options.Select(o => new QuestionOptionModel { Id = o.Id, Text = o.Text }).ToList()
            };
            if (questionFormModal is not null)
            {
                await questionFormModal.Show();
            }
        }
    }

    private async Task SaveQuestion()
    {
        try
        {
            Console.WriteLine("Saving question...");
            var options = questionModel.Options.Select(o => new QuestionOption(o.Id, o.Text)).ToList();
            
            if (isEditMode && editQuestionId.HasValue)
            {
                await QuestionApi.UpdateQuestionAsync(editQuestionId.Value, questionModel.Text, options);
                Console.WriteLine("Question updated");
            }
            else
            {
                var groupId = questionModel.QuestionGroupId != Guid.Empty ? 
                    questionModel.QuestionGroupId : 
                    (groups?.FirstOrDefault()?.Id ?? Guid.Parse("11111111-1111-1111-1111-111111111111")); 
                
                await QuestionApi.CreateQuestionWithGroupAsync(questionModel.Text, options, groupId);
                Console.WriteLine($"Question created in group {groupId}");
                
                if (selectedGroupId.HasValue && selectedGroupId.Value == groupId)
                {
                    await RefreshQuestionsInGroup();
                }
            }
            
            if (questionFormModal is not null)
            {
                await questionFormModal.Hide();
            }
            
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving question: {ex.Message}");
        }
    }

    private async Task StartDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Starting display for question {questionId}...");
            await QuestionApi.StartDisplayQuestionAsync(questionId);
            Console.WriteLine("Display started");
            
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting display: {ex.Message}");
        }
    }

    private async Task StopDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Stopping display for question {questionId}...");
            await QuestionApi.StopDisplayQuestionAsync(questionId);
            Console.WriteLine("Display stopped");
            
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping display: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(Guid questionId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this question?"))
        {
            try
            {
                Console.WriteLine($"Deleting question {questionId}...");
                await QuestionApi.DeleteQuestionAsync(questionId);
                Console.WriteLine("Question deleted");
                
                if (selectedQuestion?.QuestionId == questionId)
                {
                    selectedQuestion = null;
                }
                
                await RefreshQuestions();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting question: {ex.Message}");
            }
        }
    }

    private async Task OpenCreateGroupModal()
    {
        isEditGroupMode = false;
        editGroupId = null;
        groupModel = new GroupModel();
        if (groupFormModal is not null)
        {
            await groupFormModal.Show();
        }
    }

    private async Task OpenEditGroupModal(Guid groupId)
    {
        isEditGroupMode = true;
        editGroupId = groupId;

        var group = groups?.FirstOrDefault(g => g.Id == groupId);
        if (group is not null)
        {
            groupModel = new GroupModel
            {
                Name = group.Name
            };
            if (groupFormModal is not null)
            {
                await groupFormModal.Show();
            }
        }
    }

    private async Task SaveGroup()
    {
        try
        {
            Console.WriteLine("Saving group...");
            if (isEditGroupMode && editGroupId.HasValue)
            {
                await QuestionGroupApi.UpdateGroupAsync(editGroupId.Value, groupModel.Name);
                Console.WriteLine("Group updated");
            }
            else
            {
                await QuestionGroupApi.CreateGroupAsync(groupModel.Name);
                Console.WriteLine("Group created");
            }

            if (groupFormModal is not null)
            {
                await groupFormModal.Hide();
            }

            await RefreshGroups();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving group: {ex.Message}");
        }
    }

    private async Task DeleteGroup(Guid groupId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this group?"))
        {
            try
            {
                Console.WriteLine($"Deleting group {groupId}...");
                await QuestionGroupApi.DeleteGroupAsync(groupId);
                Console.WriteLine("Group deleted");

                if (selectedGroupId == groupId)
                {
                    selectedGroupId = null;
                    questionsInGroup = null;
                }

                await RefreshGroups();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting group: {ex.Message}");
            }
        }
    }

    private async Task SelectGroup(Guid groupId)
    {
        Console.WriteLine($"Selecting group {groupId}...");
        selectedGroupId = groupId;
        selectedQuestion = null;
        await RefreshQuestionsInGroup();
        StateHasChanged();
    }

    private string GetOptionText(List<QuestionOption> options, string optionId)
    {
        return options?.FirstOrDefault(o => o.Id == optionId)?.Text ?? "Unknown";
    }

    private string GetGroupName(Guid? questionId)
    {
        if (questionId == null) return "No Group";
        
        var group = groups?.FirstOrDefault(g => g.Questions.Any(qRef => qRef.QuestionId == questionId));
        
        return group?.Name ?? "No Group";
    }

    private int GetQuestionOrderInGroup(Guid questionId)
    {
        if (selectedGroupId == null || groups == null)
            return -1;
            
        var group = groups.FirstOrDefault(g => g.Id == selectedGroupId);
        if (group == null)
            return -1;
            
        var questionRef = group.Questions.FirstOrDefault(q => q.QuestionId == questionId);
        return questionRef != null ? questionRef.Order : -1;
    }

    private async Task HandleChangeQuestionOrder((Guid QuestionId, int NewOrder) args)
    {
        await ChangeQuestionOrder(args.QuestionId, args.NewOrder);
    }

    private async Task ChangeQuestionOrder(Guid questionId, int newOrder)
    {
        if (selectedGroupId == null || newOrder < 0)
            return;
            
        try
        {
            Console.WriteLine($"Changing order for question {questionId} to {newOrder}");
            await QuestionGroupApi.ChangeQuestionOrderAsync(selectedGroupId.Value, questionId, newOrder);
            
            await RefreshGroups();
            await RefreshQuestionsInGroup();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing question order: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class QuestionModel
    {
        public string Text { get; set; } = "";
        public List<QuestionOptionModel> Options { get; set; } = new();
        public Guid QuestionGroupId { get; set; } = Guid.Empty;
        public string? TextError { get; set; }
        public string? OptionsError { get; set; }
    }

    public class QuestionOptionModel
    {
        public string Id { get; set; } = "";
        public string Text { get; set; } = "";
    }

    public class GroupModel
    {
        public string Name { get; set; } = "";
        public string? NameError { get; set; }
    }
}
```

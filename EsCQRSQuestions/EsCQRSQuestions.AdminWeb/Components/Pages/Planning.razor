@page "/planning"
@attribute [StreamRendering(true)]
@using EsCQRSQuestions.Domain.Aggregates.Questions.Payloads
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@using EsCQRSQuestions.Domain.Aggregates.ActiveUsers.Queries
@inject QuestionApiClient QuestionApi
@inject ActiveUsersApiClient ActiveUsersApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager

<PageTitle>Question Management</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>Question Management</h1>
    <div class="d-flex align-items-center">
        <div class="badge bg-primary fs-6 p-2">
            <i class="bi bi-people-fill me-1"></i> Active Users: @(activeUsers?.TotalCount ?? 0)
        </div>
    </div>
</div>

<div class="mb-4">
    <button class="btn btn-primary" @onclick="OpenCreateQuestionModal">Create New Question</button>
</div>

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else if (!questions.Any())
{
    <p>No questions found. Create a new question to get started.</p>
}
else
{
    <h2>Questions</h2>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Question</th>
                    <th>Options</th>
                    <th>Status</th>
                    <th>Responses</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in questions)
                {
                    <tr>
                        <td>@question.Text</td>
                        <td>@question.OptionCount options</td>
                        <td>
                            @if (question.IsDisplayed)
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive</span>
                            }
                        </td>
                        <td>@question.ResponseCount responses</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-info me-1" @onclick="() => ViewQuestionDetails(question.QuestionId)">View</button>
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => OpenEditQuestionModal(question.QuestionId)">Edit</button>
                                @if (!question.IsDisplayed)
                                {
                                    <button class="btn btn-sm btn-success me-1" @onclick="() => StartDisplayQuestion(question.QuestionId)">Start Display</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteQuestion(question.QuestionId)">Delete</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-warning" @onclick="() => StopDisplayQuestion(question.QuestionId)">Stop Display</button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (selectedQuestion != null)
{
    <div class="mt-4">
        <h3>Question Details: @selectedQuestion.Text</h3>
        
        <div class="card mb-4">
            <div class="card-header">
                <h4>Options</h4>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var option in selectedQuestion.Options)
                    {
                        <li class="list-group-item">@option.Text</li>
                    }
                </ul>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h4>Responses (@selectedQuestion.Responses.Count)</h4>
            </div>
            <div class="card-body">
                @if (!selectedQuestion.Responses.Any())
                {
                    <p>No responses yet.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Participant</th>
                                    <th>Selected Option</th>
                                    <th>Comment</th>
                                    <th>Timestamp</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var response in selectedQuestion.Responses)
                                {
                                    <tr>
                                        <td>@(string.IsNullOrEmpty(response.ParticipantName) ? "Anonymous" : response.ParticipantName)</td>
                                        <td>@GetOptionText(selectedQuestion.Options, response.SelectedOptionId)</td>
                                        <td>@(string.IsNullOrEmpty(response.Comment) ? "-" : response.Comment)</td>
                                        <td>@response.Timestamp.ToString("g")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="mt-4">
                        <h5>Response Statistics</h5>
                        <div class="row">
                            @foreach (var option in selectedQuestion.Options)
                            {
                                var count = selectedQuestion.Responses.Count(r => r.SelectedOptionId == option.Id);
                                var percentage = selectedQuestion.Responses.Any() 
                                    ? (count * 100.0 / selectedQuestion.Responses.Count) 
                                    : 0;
                                
                                <div class="col-md-6 mb-3">
                                    <div>@option.Text</div>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @percentage%;" 
                                             aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                            @count (@percentage.ToString("0.0")%)
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Create/Edit Question Modal -->
<div class="modal fade" id="questionModal" tabindex="-1" aria-labelledby="questionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="questionModalLabel">@(isEditMode ? "Edit Question" : "Create New Question")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="questionText" class="form-label">Question Text</label>
                    <input type="text" class="form-control" id="questionText" @bind="questionModel.Text" />
                    @if (!string.IsNullOrEmpty(questionModel.TextError))
                    {
                        <div class="text-danger">@questionModel.TextError</div>
                    }
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Options</label>
                    @for (int i = 0; i < questionModel.Options.Count; i++)
                    {
                        var index = i;
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" placeholder="Option text" 
                                   @bind="questionModel.Options[index].Text" />
                            @if (questionModel.Options.Count > 2)
                            {
                                <button class="btn btn-outline-danger" type="button" @onclick="() => RemoveOption(index)">
                                    <span class="bi bi-trash" aria-hidden="true"></span>
                                </button>
                            }
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(questionModel.OptionsError))
                    {
                        <div class="text-danger">@questionModel.OptionsError</div>
                    }
                    <button class="btn btn-outline-secondary" type="button" @onclick="AddOption">
                        <span class="bi bi-plus" aria-hidden="true"></span> Add Option
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveQuestion">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<QuestionListQuery.QuestionSummaryRecord>? questions;
    private QuestionDetailQuery.QuestionDetailRecord? selectedQuestion;
    private QuestionModel questionModel = new();
    private bool isEditMode = false;
    private Guid? editQuestionId;
    private ActiveUsersQuery.ActiveUsersRecord? activeUsers;
    // Fixed aggregate ID for the ActiveUsers aggregate
    private readonly Guid activeUsersId = Guid.Parse("0195a6f7-dfff-75a7-b99f-36a0552a8eca");

    protected override async Task OnInitializedAsync()
    {
        // Set up SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrlWithClientFactory("https+http://apiservice/questionHub", HttpMessageHandlerFactory)
            .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(5) })  // より積極的な再接続
            .Build();

        // 接続状態の変更をより詳細にログ出力
        hubConnection.Closed += async (error) =>
        {
            Console.Error.WriteLine($"SignalR connection closed: {error?.Message}");
            Console.Error.WriteLine($"Connection state: {hubConnection.State}");
            await Task.Delay(new Random().Next(0, 5) * 1000);
            try
            {
                await hubConnection.StartAsync();
                Console.WriteLine("SignalR connection restarted successfully");
                // 再接続後に管理者グループに再参加
                await hubConnection.InvokeAsync("JoinAdminGroup");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error restarting SignalR connection: {ex.Message}");
            }
        };

        // 接続状態の変更をログ出力
        hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"SignalR reconnecting: {error?.Message}");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"SignalR reconnected with connection ID: {connectionId}");
            return Task.CompletedTask;
        };

        // Handle events
        hubConnection.On<object>("ActiveUsersCreated", async (data) =>
        {
            try
            {
                Console.WriteLine($"ActiveUsersCreated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling ActiveUsersCreated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserConnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserConnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserConnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserDisconnected", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserDisconnected event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserDisconnected event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("UserNameUpdated", async (data) =>
        {
            try
            {
                Console.WriteLine($"UserNameUpdated event received: {data}");
                await RefreshActiveUsers();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error handling UserNameUpdated event: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        });
        
        hubConnection.On<object>("QuestionCreated", async _ =>
        {
            await RefreshQuestions();
            Console.WriteLine("Question created event received");
        });

        hubConnection.On<object>("QuestionUpdated", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion != null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStarted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion != null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDisplayStopped", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion != null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("ResponseAdded", async _ =>
        {
            if (selectedQuestion != null)
            {
                await RefreshSelectedQuestion();
            }
        });

        hubConnection.On<object>("QuestionDeleted", async _ =>
        {
            await RefreshQuestions();
            if (selectedQuestion != null && questions != null && questions.All(q => q.QuestionId != selectedQuestion.QuestionId))
            {
                selectedQuestion = null;
            }
        });

        // Start the connection
        try
        {
            Console.WriteLine("Starting SignalR connection...");
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully");
            
            // 明示的に管理者グループに参加
            await hubConnection.InvokeAsync("JoinAdminGroup");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR connection: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }

        // Load initial data
        await RefreshQuestions();
        
        // Refresh active users
        await RefreshActiveUsers();
    }

    private async Task RefreshActiveUsers()
    {
        try
        {
            Console.WriteLine($"Refreshing active users with ID {activeUsersId}...");
            activeUsers = await ActiveUsersApi.GetActiveUsersAsync(activeUsersId);
            Console.WriteLine($"Active users count: {activeUsers?.TotalCount ?? 0}");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active users: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }
    }
    
    private async Task RefreshQuestions()
    {
        try
        {
            Console.WriteLine("Refreshing questions...");
            var fetchedQuestions = await QuestionApi.GetQuestionsAsync();
            questions = fetchedQuestions.ToList();
            Console.WriteLine($"Fetched {questions.Count} questions");
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("State has changed");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing questions: {ex.Message}");
        }
    }

    private async Task RefreshSelectedQuestion()
    {
        try
        {
            if (selectedQuestion != null)
            {
                Console.WriteLine($"Refreshing selected question {selectedQuestion.QuestionId}...");
                selectedQuestion = await QuestionApi.GetQuestionByIdAsync(selectedQuestion.QuestionId);
                Console.WriteLine("Selected question refreshed");
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("State has changed for selected question");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing selected question: {ex.Message}");
        }
    }

    private async Task ViewQuestionDetails(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Viewing question details for {questionId}...");
            selectedQuestion = await QuestionApi.GetQuestionByIdAsync(questionId);
            Console.WriteLine("Question details loaded");
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error viewing question details: {ex.Message}");
        }
    }

    private async Task OpenCreateQuestionModal()
    {
        isEditMode = false;
        editQuestionId = null;
        questionModel = new QuestionModel
        {
            Options = new List<QuestionOptionModel>
            {
                new QuestionOptionModel { Id = "1", Text = "" },
                new QuestionOptionModel { Id = "2", Text = "" }
            }
        };
        await ShowModal();
    }

    private async Task OpenEditQuestionModal(Guid questionId)
    {
        isEditMode = true;
        editQuestionId = questionId;
        
        var question = await QuestionApi.GetQuestionByIdAsync(questionId);
        if (question != null)
        {
            questionModel = new QuestionModel
            {
                Text = question.Text,
                Options = question.Options.Select(o => new QuestionOptionModel { Id = o.Id, Text = o.Text }).ToList()
            };
            await ShowModal();
        }
    }

    private async Task SaveQuestion()
    {
        // Validate
        bool isValid = true;
        
        if (string.IsNullOrWhiteSpace(questionModel.Text))
        {
            questionModel.TextError = "Question text is required";
            isValid = false;
        }
        else
        {
            questionModel.TextError = null;
        }
        
        if (questionModel.Options.Count < 2)
        {
            questionModel.OptionsError = "At least two options are required";
            isValid = false;
        }
        else if (questionModel.Options.Any(o => string.IsNullOrWhiteSpace(o.Text)))
        {
            questionModel.OptionsError = "All options must have text";
            isValid = false;
        }
        else
        {
            questionModel.OptionsError = null;
        }
        
        if (!isValid)
        {
            return;
        }
        
        try
        {
            Console.WriteLine("Saving question...");
            // Convert to domain model
            var options = questionModel.Options.Select(o => new QuestionOption(o.Id, o.Text)).ToList();
            
            if (isEditMode && editQuestionId.HasValue)
            {
                await QuestionApi.UpdateQuestionAsync(editQuestionId.Value, questionModel.Text, options);
                Console.WriteLine("Question updated");
            }
            else
            {
                await QuestionApi.CreateQuestionAsync(questionModel.Text, options);
                Console.WriteLine("Question created");
            }
            
            await CloseModal();
            
            // Manually refresh questions after saving
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving question: {ex.Message}");
        }
    }

    private void AddOption()
    {
        var maxId = questionModel.Options.Count > 0 
            ? questionModel.Options.Max(o => int.Parse(o.Id)) 
            : 0;
        
        questionModel.Options.Add(new QuestionOptionModel 
        { 
            Id = (maxId + 1).ToString(), 
            Text = "" 
        });
    }

    private void RemoveOption(int index)
    {
        if (questionModel.Options.Count > 2 && index >= 0 && index < questionModel.Options.Count)
        {
            questionModel.Options.RemoveAt(index);
        }
    }

    private async Task StartDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Starting display for question {questionId}...");
            await QuestionApi.StartDisplayQuestionAsync(questionId);
            Console.WriteLine("Display started");
            
            // Manually refresh questions after starting display
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting display: {ex.Message}");
        }
    }

    private async Task StopDisplayQuestion(Guid questionId)
    {
        try
        {
            Console.WriteLine($"Stopping display for question {questionId}...");
            await QuestionApi.StopDisplayQuestionAsync(questionId);
            Console.WriteLine("Display stopped");
            
            // Manually refresh questions after stopping display
            await RefreshQuestions();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping display: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(Guid questionId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this question?"))
        {
            try
            {
                Console.WriteLine($"Deleting question {questionId}...");
                await QuestionApi.DeleteQuestionAsync(questionId);
                Console.WriteLine("Question deleted");
                
                if (selectedQuestion?.QuestionId == questionId)
                {
                    selectedQuestion = null;
                }
                
                // Manually refresh questions after deleting
                await RefreshQuestions();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting question: {ex.Message}");
            }
        }
    }

    private string GetOptionText(List<QuestionOption> options, string optionId)
    {
        return options.FirstOrDefault(o => o.Id == optionId)?.Text ?? "Unknown";
    }

    private async Task ShowModal()
    {
        await JsRuntime.InvokeVoidAsync("showModal", "questionModal");
    }

    private async Task CloseModal()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", "questionModal");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private class QuestionModel
    {
        public string Text { get; set; } = "";
        public string? TextError { get; set; }
        public List<QuestionOptionModel> Options { get; set; } = new();
        public string? OptionsError { get; set; }
    }

    private class QuestionOptionModel
    {
        public string Id { get; set; } = "";
        public string Text { get; set; } = "";
    }
}

<script>
    function showModal(id) {
        $('#' + id).modal('show');
    }
    
    function hideModal(id) {
        $('#' + id).modal('hide');
    }
</script>

@page "/questionair"
@page "/questionair/{UniqueCode}"
@attribute [StreamRendering(true)]
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@inject QuestionApiClient QuestionApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager

<PageTitle>Survey</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Real-time Survey</h2>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(UniqueCode))
                    {
                        <div class="alert alert-info mb-3">
                            <small>Survey Code: <strong>@UniqueCode</strong></small>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label for="uniqueCode" class="form-label">Enter Survey Code</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="uniqueCode" 
                                       @bind="inputUniqueCode" placeholder="Enter survey code" />
                                <button class="btn btn-outline-primary" type="button" @onclick="NavigateToSurvey">
                                    Go to Survey
                                </button>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="participantName" class="form-label">Your Name (optional)</label>
                        <input type="text" class="form-control" id="participantName" 
                               @bind="participantName" placeholder="Enter your name" />
                    </div>

                    @if (activeQuestion == null)
                    {
                        <div class="text-center py-5">
                            <h3>Welcome to the Survey!</h3>
                            <p class="lead">Please wait for a question to be displayed.</p>
                            <div class="spinner-border text-primary mt-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="question-container">
                            <h3 class="mb-4">@activeQuestion.Text</h3>
                            
                            <div class="mb-4">
                                @foreach (var option in activeQuestion.Options)
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio" name="questionOptions" 
                                               id="option-@option.Id" value="@option.Id" 
                                               checked="@(selectedOptionId == option.Id)"
                                               @onchange="() => selectedOptionId = option.Id" />
                                        <label class="form-check-label" for="option-@option.Id">
                                            @option.Text
                                        </label>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(optionError))
                                {
                                    <div class="text-danger mt-2">@optionError</div>
                                }
                            </div>
                            
                            <div class="mb-4">
                                @if (!string.IsNullOrEmpty(selectedOptionId))
                                {
                                    <label for="comment" class="form-label">Comment (optional)</label>
                                    <textarea class="form-control" id="comment" rows="3" 
                                              @bind="comment" placeholder="Add your comment here"></textarea>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        Waiting to show question
                                    </div>
                                }
                            </div>
                            
                            <button class="btn btn-primary" @onclick="SubmitResponse" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Submitting...</span>
                                }
                                else
                                {
                                    <span>Submit Response</span>
                                }
                            </button>
                        </div>

                        @if (activeQuestion.Responses.Any())
                        {
                            <div class="mt-5">
                                <h4>Response Statistics</h4>
                                <div class="row">
                                    @foreach (var option in activeQuestion.Options)
                                    {
                                        var count = activeQuestion.Responses.Count(r => r.SelectedOptionId == option.Id);
                                        var percentage = activeQuestion.Responses.Any() 
                                            ? (count * 100.0 / activeQuestion.Responses.Count) 
                                            : 0;
                                        
                                        <div class="col-md-6 mb-3">
                                            <div>@option.Text</div>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentage%;" 
                                                     aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                                    @count (@percentage.ToString("0.0")%)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                <div class="mt-4">
                                    <h5>Recent Comments</h5>
                                    @if (activeQuestion.Responses.Any(r => !string.IsNullOrEmpty(r.Comment)))
                                    {
                                        <div class="list-group">
                                            @foreach (var response in activeQuestion.Responses
                                                .Where(r => !string.IsNullOrEmpty(r.Comment))
                                                .OrderByDescending(r => r.Timestamp)
                                                .Take(5))
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex w-100 justify-content-between">
                                                        <h6 class="mb-1">@(string.IsNullOrEmpty(response.ParticipantName) ? "Anonymous" : response.ParticipantName)</h6>
                                                        <small>@response.Timestamp.ToString("g")</small>
                                                    </div>
                                                    <p class="mb-1">@response.Comment</p>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No comments yet.</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? UniqueCode { get; set; }
    
    private HubConnection hubConnection;
    private ActiveQuestionQuery.ActiveQuestionRecord? activeQuestion;
    private string participantName = "";
    private string selectedOptionId = "";
    private string comment = "";
    private string errorMessage = "";
    private string optionError = "";
    private bool isSubmitting = false;
    private bool showResponses = false;
    private bool hasSubmitted = false;
    private string inputUniqueCode = "";

    protected override async Task OnInitializedAsync()
    {
        // Set up SignalR connection with improved timeout and resilience settings
        hubConnection = new HubConnectionBuilder()
            .WithUrlWithClientFactory("https+http://apiservice/questionHub", HttpMessageHandlerFactory)
            .WithAutomaticReconnect(new[] { 
                TimeSpan.FromSeconds(1), 
                TimeSpan.FromSeconds(2), 
                TimeSpan.FromSeconds(5), 
                TimeSpan.FromSeconds(10) 
            })
            .ConfigureLogging(logging => {
                logging.AddConsole();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.Closed += async (error) =>
        {
            Console.Error.WriteLine($"SignalR connection closed: {error?.Message}");
            
            // Implement exponential backoff for reconnection attempts
            for (var i = 0; i < 5; i++)
            {
                try
                {
                    var retryDelay = Math.Min(1000 * Math.Pow(2, i), 30000); // exponential backoff capped at 30s
                    Console.WriteLine($"Attempting reconnection in {retryDelay/1000} seconds...");
                    await Task.Delay((int)retryDelay);
                    
                    await hubConnection.StartAsync();
                    Console.WriteLine("SignalR connection restarted successfully");
                    
                    // Set participant name again after reconnection
                    if (!string.IsNullOrEmpty(participantName))
                    {
                        await hubConnection.InvokeAsync("SetParticipantName", participantName);
                    }
                    
                    // Join as survey participant with unique code if available
                    if (!string.IsNullOrEmpty(UniqueCode))
                    {
                        await hubConnection.InvokeAsync("JoinAsSurveyParticipant", UniqueCode);
                        Console.WriteLine($"Reconnected to survey with unique code: {UniqueCode}");
                    }
                    else
                    {
                        await hubConnection.InvokeAsync("JoinAsSurveyParticipant");
                        Console.WriteLine("Reconnected to survey without unique code");
                    }
                    
                    // Refresh active question
                    await RefreshActiveQuestion();
                    await InvokeAsync(StateHasChanged);
                    
                    break; // Exit the retry loop if successful
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error during reconnection attempt {i+1}: {ex.Message}");
                    if (i == 4) // Last attempt
                    {
                        errorMessage = "Connection lost. Please refresh the page to reconnect.";
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        };
        
        // Improved connection state logging
        hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"SignalR reconnecting... Error: {error?.Message}");
            Console.WriteLine($"Connection state: {hubConnection.State}");
            errorMessage = "Connection unstable. Attempting to reconnect...";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"SignalR reconnected with connection ID: {connectionId}");
            Console.WriteLine($"Connection state: {hubConnection.State}");
            errorMessage = "";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        // Handle events
        hubConnection.On<object>("QuestionDisplayStarted", async _ =>
        {
            await RefreshActiveQuestion();
            hasSubmitted = false;
            selectedOptionId = "";
            comment = "";
            errorMessage = "";
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<object>("QuestionDisplayStopped", async _ =>
        {
            activeQuestion = null;
            hasSubmitted = false;
            selectedOptionId = "";
            comment = "";
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<object>("ResponseAdded", async _ =>
        {
            if (activeQuestion != null)
            {
                Console.WriteLine("Response added event received");
                await RefreshActiveQuestion();
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("Question refreshed after response added");
            }
        });

        // Set participant name if provided
        hubConnection.On("NameSet", (string name) =>
        {
            participantName = name;
            InvokeAsync(StateHasChanged);
        });

        // Start the connection with timeout handling
        try
        {
            Console.WriteLine("Starting SignalR connection...");
            
            // Create a task that will complete if the connection times out
            var timeoutTask = Task.Delay(TimeSpan.FromSeconds(30));
            var connectionTask = hubConnection.StartAsync();
            
            // Wait for either the connection to complete or the timeout
            var completedTask = await Task.WhenAny(connectionTask, timeoutTask);
            
            if (completedTask == timeoutTask)
            {
                throw new TimeoutException("SignalR connection timed out after 30 seconds");
            }
            
            // Ensure the connection task completed successfully
            await connectionTask;
            
            Console.WriteLine($"SignalR connection established successfully. State: {hubConnection.State}");
            
            // Join as survey participant with unique code if available
            if (!string.IsNullOrEmpty(UniqueCode))
            {
                await hubConnection.InvokeAsync("JoinAsSurveyParticipant", UniqueCode);
                Console.WriteLine($"Joined survey with unique code: {UniqueCode}");
            }
            else
            {
                await hubConnection.InvokeAsync("JoinAsSurveyParticipant");
                Console.WriteLine("Joined survey without unique code");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR connection: {ex.Message}");
            errorMessage = $"Connection error: {ex.Message}";
        }

        // Get the active question
        await RefreshActiveQuestion();
    }

    private async Task RefreshActiveQuestion()
    {
        try
        {
            Console.WriteLine("Refreshing active question...");
            activeQuestion = await QuestionApi.GetActiveQuestionAsync();
            if (activeQuestion != null)
            {
                Console.WriteLine($"Active question received: {activeQuestion.Text}");
                // Reset submission status if question changed
                var currentResponses = activeQuestion.Responses.Where(r => r.ParticipantName == participantName);
                hasSubmitted = currentResponses.Any();
            }
            else
            {
                Console.WriteLine("No active question at this time");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active question: {ex.Message}");
            // Don't update the error message here to avoid overriding connection errors
        }
    }

    private void NavigateToSurvey()
    {
        if (!string.IsNullOrWhiteSpace(inputUniqueCode))
        {
            // URLに含まれない文字を削除/置換
            var sanitizedCode = Uri.EscapeDataString(inputUniqueCode.Trim());
            NavigationManager.NavigateTo($"/questionair/{sanitizedCode}");
        }
        else
        {
            errorMessage = "Please enter a valid survey code";
        }
    }
    
    private void ToggleResponses()
    {
        showResponses = !showResponses;
    }

    private async Task SubmitResponse()
    {
        // Validate input
        if (string.IsNullOrWhiteSpace(selectedOptionId))
        {
            optionError = "Please select an option";
        }
        else
        {
            optionError = "";
        }

        if (activeQuestion == null)
        {
            errorMessage = "No active question to respond to";
            return;
        }

        if (hasSubmitted)
        {
            errorMessage = "You have already submitted a response to this question";
            return;
        }

        try
        {
            isSubmitting = true;
            
            // Update participant name if changed
            if (!string.IsNullOrEmpty(participantName))
            {
                await hubConnection.InvokeAsync("SetParticipantName", participantName);
            }
            
            // Submit response
            await QuestionApi.AddResponseAsync(
                activeQuestion.QuestionId,
                participantName,
                selectedOptionId,
                comment);
            
            // Mark as submitted and show responses
            hasSubmitted = true;
            showResponses = true;
            
            // Refresh to see updated responses
            await RefreshActiveQuestion();
            
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting response: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

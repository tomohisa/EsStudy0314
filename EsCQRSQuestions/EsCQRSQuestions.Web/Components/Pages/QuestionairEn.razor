@page "/questionair"
@page "/questionair/{UniqueCode}"
@attribute [StreamRendering(true)]
@using EsCQRSQuestions.Domain.Aggregates.Questions.Queries
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using System.Threading
@implements IAsyncDisposable

@inject QuestionApiClient QuestionApi
@inject IJSRuntime JsRuntime
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject NavigationManager NavigationManager

<PageTitle>Survey</PageTitle>

<style>
    /* Button basic styles */
    .submit-button {
        position: relative;
        transition: all 0.3s ease;
        overflow: hidden;
        min-width: 150px;
    }
    
    /* Click effect */
    .submit-button:active:not(:disabled) {
        transform: scale(0.95);
    }
    
    /* Submitting pulse animation */
    .submit-pulse {
        animation: pulse 1.5s infinite;
    }
    
    /* Success fade in animation */
    .submit-success {
        animation: fadeInOut 3s;
    }
    
    /* Error shake animation */
    .submit-error {
        animation: shake 0.5s, fadeInOut 5s;
    }
    
    /* Animation definitions */
    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
        100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
    }
    
    @@keyframes fadeInOut {
        0% { opacity: 0.8; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { opacity: 0.8; }
    }
    
    @@keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    
    /* Progress bar effect during submission */
    .submit-progress::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.7);
        width: 0;
        animation: progress 2s infinite linear;
    }
    
    @@keyframes progress {
        0% { width: 0; }
        50% { width: 100%; }
        100% { width: 0; }
    }
</style>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Real-Time Survey</h2>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(UniqueCode))
                    {
                        <div class="alert alert-info mb-3">
                            <small>Survey Code: <strong>@UniqueCode</strong></small>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label for="uniqueCode" class="form-label">Enter Survey Code</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="uniqueCode" 
                                       @bind="inputUniqueCode" placeholder="Enter survey code" />
                                <button class="btn btn-outline-primary" type="button" @onclick="NavigateToSurvey" disabled="@isValidating">
                                    @if (isValidating)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Validating...</span>
                                    }
                                    else
                                    {
                                        <span>Join Survey</span>
                                    }
                                </button>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="participantName" class="form-label">Your Name (Optional)</label>
                        <input type="text" class="form-control" id="participantName" 
                               @bind="participantName" placeholder="Enter your name" />
                    </div>

                    @if (activeQuestion == null)
                    {
                        <div class="text-center py-5">
                            @if (string.IsNullOrEmpty(UniqueCode))
                            {
                                <h3>Please Enter a Survey Code</h3>
                                <p class="lead">To join a survey, enter the code in the form above.</p>
                                <div class="alert alert-info mt-3">
                                    <i class="bi bi-info-circle me-2"></i>
                                    The survey code is provided by the survey administrator.
                                </div>
                            }
                            else
                            {
                                <h3>Welcome to the Survey!</h3>
                                <p class="lead">Please wait for a question to appear.</p>
                                <div class="spinner-border text-primary mt-3" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="question-container">
                            <h3 class="mb-4">@activeQuestion.Text</h3>
                            
                            <div class="mb-4">
                                @if (activeQuestion.AllowMultipleResponses)
                                {
                                    <div class="alert alert-info mb-3">
                                        <i class="bi bi-info-circle me-2"></i>You can select multiple options
                                    </div>
                                    
                                    @foreach (var option in activeQuestion.Options)
                                    {
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="checkbox" name="questionOptions" 
                                                   id="option-@option.Id" value="@option.Id" 
                                                   checked="@(selectedOptionIds.Contains(option.Id))"
                                                   @onchange="(e) => UpdateSelectedOptions(option.Id, (bool)e.Value)" />
                                            <label class="form-check-label" for="option-@option.Id">
                                                @option.Text
                                            </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    @foreach (var option in activeQuestion.Options)
                                    {
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="radio" name="questionOptions" 
                                                   id="option-@option.Id" value="@option.Id" 
                                                   checked="@(selectedOptionIds.Contains(option.Id))"
                                                   @onchange="(e) => SelectSingleOption(option.Id)" />
                                            <label class="form-check-label" for="option-@option.Id">
                                                @option.Text
                                            </label>
                                        </div>
                                    }
                                }
                                
                                @if (!string.IsNullOrEmpty(optionError))
                                {
                                    <div class="text-danger mt-2">@optionError</div>
                                }
                            </div>
                            
                            <div class="mb-4">
                                @if (selectedOptionIds.Any())
                                {
                                    <label for="comment" class="form-label">Comment (Optional)</label>
                                    <textarea class="form-control" id="comment" rows="3" 
                                              @bind="comment" placeholder="Enter your comment"></textarea>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        Please select an answer!
                                    </div>
                                }
                            </div>
                            
                            <button class="@GetButtonClass() submit-button @GetButtonAnimation()" 
                                    @onclick="SubmitResponse" 
                                    disabled="@(buttonState == SubmitButtonState.Submitting)"
                                    aria-live="polite">
                                <div class="d-flex align-items-center justify-content-center">
                                    @switch (buttonState)
                                    {
                                        case SubmitButtonState.Ready:
                                            <span>Submit Response</span>
                                            break;
                                        case SubmitButtonState.Submitting:
                                            <div class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></div>
                                            <span>Submitting...</span>
                                            break;
                                        case SubmitButtonState.Success:
                                            <i class="bi bi-check-circle-fill me-2"></i>
                                            <span>Submitted!</span>
                                            break;
                                        case SubmitButtonState.Error:
                                            <i class="bi bi-exclamation-circle-fill me-2"></i>
                                            <span>Error - Retry</span>
                                            break;
                                    }
                                </div>
                            </button>
                        </div>

                        @if (activeQuestion.Responses.Any())
                        {
                            <div class="mt-5">
                                <h4>Response Statistics</h4>
                                <div class="row">
                                    @foreach (var option in activeQuestion.Options)
                                    {
                                        var count = activeQuestion.Responses.Count(r => r.SelectedOptionId == option.Id);
                                        
                                        // Get unique respondent count (group by client ID)
                                        var uniqueRespondents = activeQuestion.Responses
                                            .Select(r => r.ClientId)
                                            .Distinct()
                                            .Count();
                                        
                                        // Safe percentage calculation (avoid division by zero)
                                        var percentage = uniqueRespondents > 0 
                                            ? (count * 100.0 / uniqueRespondents)
                                            : 0;
                                        
                                        <div class="col-md-6 mb-3">
                                            <div>@option.Text</div>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentage%;" 
                                                     aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                                    @count (@percentage.ToString("0.0")%)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                <div class="mt-4">
                                    <h5>Recent Comments</h5>
                                    @if (activeQuestion.Responses.Any(r => !string.IsNullOrEmpty(r.Comment)))
                                    {
                                        <div class="list-group">
                                            @foreach (var response in activeQuestion.Responses
                                                .Where(r => !string.IsNullOrEmpty(r.Comment))
                                                .OrderByDescending(r => r.Timestamp)
                                                .Take(5))
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex w-100 justify-content-between">
                                                        <h6 class="mb-1">@(string.IsNullOrEmpty(response.ParticipantName) ? "Anonymous" : response.ParticipantName)</h6>
                                                        <small>@response.Timestamp.ToString("g")</small>
                                                    </div>
                                                    <p class="mb-1">@response.Comment</p>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No comments yet.</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? UniqueCode { get; set; }
    
    private HubConnection hubConnection;
    private ActiveQuestionQuery.ActiveQuestionRecord? activeQuestion;
    private string participantName = "";
    private List<string> selectedOptionIds = new List<string>(); // Multiple selections support
    private string comment = "";
    private string errorMessage = "";
    private string optionError = "";
    private bool isSubmitting = false;
    private bool showResponses = false;
    private bool hasSubmitted = false;
    private string inputUniqueCode = "";
    private bool isValidating = false;
    
    // Client ID variable
    private string clientId = "";

    // Previous UniqueCode to track changes
    private string? previousUniqueCode;
    
    // Button state enum
    private enum SubmitButtonState
    {
        Ready,      // Ready to submit
        Submitting, // Submitting
        Success,    // Submission successful
        Error       // Submission failed
    }
    
    // Current button state
    private SubmitButtonState buttonState = SubmitButtonState.Ready;
    
    // Timer variable (to reset state after showing success/error)
    private Timer? stateResetTimer;

    // JS interop function
    [JSInvokable]
    public void SetClientId(string id)
    {
        clientId = id;
        Console.WriteLine($"Client ID set: {clientId}");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Get or create client ID
        await JsRuntime.InvokeVoidAsync("getOrCreateClientId");
        
        // Set up SignalR connection with improved timeout and resilience settings
        hubConnection = new HubConnectionBuilder()
            .WithUrlWithClientFactory("https+http://apiservice/questionHub", HttpMessageHandlerFactory)
            .WithAutomaticReconnect(new[] { 
                TimeSpan.FromSeconds(1), 
                TimeSpan.FromSeconds(2), 
                TimeSpan.FromSeconds(5), 
                TimeSpan.FromSeconds(10) 
            })
            .ConfigureLogging(logging => {
                logging.AddConsole();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.Closed += async (error) =>
        {
            Console.Error.WriteLine($"SignalR connection closed: {error?.Message}");
            
            // Implement exponential backoff for reconnection attempts
            for (var i = 0; i < 5; i++)
            {
                try
                {
                    var retryDelay = Math.Min(1000 * Math.Pow(2, i), 30000); // exponential backoff capped at 30s
                    Console.WriteLine($"Attempting reconnection in {retryDelay/1000} seconds...");
                    await Task.Delay((int)retryDelay);
                    
                    await hubConnection.StartAsync();
                    Console.WriteLine("SignalR connection restarted successfully");
                    
                    // Set participant name again after reconnection
                    if (!string.IsNullOrEmpty(participantName))
                    {
                        await hubConnection.InvokeAsync("SetParticipantName", participantName);
                    }
                    
                    // Join as survey participant with unique code if available
                    if (!string.IsNullOrEmpty(UniqueCode))
                    {
                        await hubConnection.InvokeAsync("JoinAsSurveyParticipant", UniqueCode);
                        Console.WriteLine($"Reconnected to survey with unique code: {UniqueCode}");
                    }
                    
                    // Refresh active question
                    await RefreshActiveQuestion();
                    await InvokeAsync(StateHasChanged);
                    
                    break; // Exit the retry loop if successful
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error during reconnection attempt {i+1}: {ex.Message}");
                    if (i == 4) // Last attempt
                    {
                        errorMessage = "Connection lost. Please refresh the page to reconnect.";
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        };
        
        // Improved connection state logging
        hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"SignalR reconnecting... Error: {error?.Message}");
            Console.WriteLine($"Connection state: {hubConnection.State}");
            errorMessage = "Connection unstable. Attempting to reconnect...";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"SignalR reconnected with connection ID: {connectionId}");
            Console.WriteLine($"Connection state: {hubConnection.State}");
            errorMessage = "";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        // Handle events
        hubConnection.On<object>("JoinedGroup", group => {
            Console.WriteLine($"Joined group with UniqueCode: {(group as dynamic).UniqueCode}");
            errorMessage = "";
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<object>("QuestionDisplayStarted", async data => {
            Console.WriteLine($"QuestionDisplayStarted event received: {System.Text.Json.JsonSerializer.Serialize(data)}");
            await RefreshActiveQuestion();
            hasSubmitted = false;
            selectedOptionIds.Clear();
            comment = "";
            errorMessage = "";
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<object>("QuestionDisplayStopped", async _ =>
        {
            activeQuestion = null;
            hasSubmitted = false;
            selectedOptionIds.Clear();
            comment = "";
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<object>("ResponseAdded", async _ =>
        {
            if (activeQuestion != null)
            {
                Console.WriteLine("Response added event received");
                await RefreshActiveQuestion();
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("Question refreshed after response added");
            }
        });

        // Set participant name if provided
        hubConnection.On("NameSet", (string name) =>
        {
            participantName = name;
            InvokeAsync(StateHasChanged);
        });

        // Start the connection with timeout handling
        try
        {
            Console.WriteLine("Starting SignalR connection...");
            
            // Create a task that will complete if the connection times out
            var timeoutTask = Task.Delay(TimeSpan.FromSeconds(30));
            var connectionTask = hubConnection.StartAsync();
            
            // Wait for either the connection to complete or the timeout
            var completedTask = await Task.WhenAny(connectionTask, timeoutTask);
            
            if (completedTask == timeoutTask)
            {
                throw new TimeoutException("SignalR connection timed out after 30 seconds");
            }
            
            // Ensure the connection task completed successfully
            await connectionTask;
            
            Console.WriteLine($"SignalR connection established successfully. State: {hubConnection.State}");
            
            // Join as survey participant with unique code if available
            if (!string.IsNullOrEmpty(UniqueCode))
            {
                await hubConnection.InvokeAsync("JoinAsSurveyParticipant", UniqueCode);
                Console.WriteLine($"Joined survey with unique code: {UniqueCode}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR connection: {ex.Message}");
            errorMessage = $"Connection error: {ex.Message}";
        }

        // Get the active question
        await RefreshActiveQuestion();
    }

    /// <summary>
    /// Lifecycle method called when parameters change
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Only process if UniqueCode has changed
        if (UniqueCode != previousUniqueCode && !string.IsNullOrEmpty(UniqueCode))
        {
            Console.WriteLine($"UniqueCode changed from {previousUniqueCode} to {UniqueCode}");
            previousUniqueCode = UniqueCode;
            
            // If already connected, join the SignalR group without reconnecting
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.InvokeAsync("JoinAsSurveyParticipant", UniqueCode);
                await RefreshActiveQuestion();
                Console.WriteLine($"Joined survey with unique code: {UniqueCode} in OnParametersSetAsync");
            }
        }
        
        await base.OnParametersSetAsync();
    }

    private async Task RefreshActiveQuestion()
    {
        try
        {
            Console.WriteLine($"Refreshing active question for UniqueCode: {UniqueCode ?? "none"}");
            
            // Don't show question if no UniqueCode
            if (string.IsNullOrEmpty(UniqueCode))
            {
                activeQuestion = null;
                return;
            }
            
            activeQuestion = await QuestionApi.GetActiveQuestionAsync(UniqueCode);
            if (activeQuestion != null && activeQuestion.QuestionId != Guid.Empty)
            {
                Console.WriteLine($"Active question received: {activeQuestion.Text}");
                
                // Check for duplicate responses based on client ID
                var currentResponses = activeQuestion.Responses.Where(r => r.ClientId == clientId);
                hasSubmitted = currentResponses.Any();
                
                if (hasSubmitted)
                {
                    Console.WriteLine($"User with client ID {clientId} has already submitted a response");
                }
                
                // Clear error message on success
                errorMessage = "";
            }
            else
            {
                Console.WriteLine("No active question at this time");
                activeQuestion = null; // Ensure null if empty result returned
                
                // Code validation is already done, so no active question is not an error
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error refreshing active question: {ex.Message}");
            
            // Only update error message for connection errors
            if (ex.Message.Contains("Connection") || ex.Message.Contains("connect"))
            {
                errorMessage = $"Server connection issue: {ex.Message}";
            }
            // 404 error means non-existent code
            else if (ex is HttpRequestException httpEx && httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "The survey code entered does not exist. Please check the code and try again.";
            }
        }
    }

    /// <summary>
    /// Method to enter survey code and navigate
    /// </summary>
    private async Task NavigateToSurvey()
    {
        if (!string.IsNullOrWhiteSpace(inputUniqueCode))
        {
            // Remove/replace URL-unsafe characters
            var sanitizedCode = Uri.EscapeDataString(inputUniqueCode.Trim());
            
            // Validate the code
            isValidating = true;
            errorMessage = ""; // Clear error message
            
            try
            {
                bool isValidCode = await QuestionApi.ValidateUniqueCodeAsync(sanitizedCode);
                
                if (!isValidCode)
                {
                    errorMessage = "The survey code entered does not exist. Please check the code and try again.";
                    isValidating = false;
                    return;
                }
                
                // Update UniqueCode
                UniqueCode = sanitizedCode;
                
                // Update URL (client-side routing)
                NavigationManager.NavigateTo($"/questionair/{sanitizedCode}");
                
                // Join SignalR group after navigation
                if (hubConnection.State == HubConnectionState.Connected)
                {
                    try
                    {
                        Console.WriteLine($"Joining survey with unique code: {sanitizedCode} after navigation");
                        await hubConnection.InvokeAsync("JoinAsSurveyParticipant", sanitizedCode);
                        await RefreshActiveQuestion();
                    }
                    catch (Exception ex)
                    {
                        Console.Error.WriteLine($"Error joining survey after navigation: {ex.Message}");
                        errorMessage = "Error joining survey group. Please refresh the page.";
                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error validating survey code: {ex.Message}";
                Console.Error.WriteLine(errorMessage);
            }
            finally
            {
                isValidating = false;
            }
        }
        else
        {
            errorMessage = "Please enter a survey code. A code is required to join a survey.";
        }
    }
    
    private void ToggleResponses()
    {
        showResponses = !showResponses;
    }

    private void UpdateSelectedOptions(string optionId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedOptionIds.Contains(optionId))
            {
                selectedOptionIds.Add(optionId);
            }
        }
        else
        {
            selectedOptionIds.Remove(optionId);
        }
    }

    private void SelectSingleOption(string optionId)
    {
        selectedOptionIds.Clear();
        selectedOptionIds.Add(optionId);
    }

    private async Task SubmitResponse()
    {
        // Input validation
        if (!selectedOptionIds.Any())
        {
            optionError = "Please select at least one option";
            return;
        }
        else
        {
            optionError = "";
        }

        if (activeQuestion == null)
        {
            errorMessage = "No question to answer";
            return;
        }

        if (hasSubmitted)
        {
            errorMessage = "You have already answered this question";
            return;
        }

        // If client ID is empty, try to regenerate
        if (string.IsNullOrEmpty(clientId))
        {
            await JsRuntime.InvokeVoidAsync("getOrCreateClientId");
            await Task.Delay(500); // Wait a bit for ID to be set
            
            if (string.IsNullOrEmpty(clientId))
            {
                // If still can't get it, generate temporary ID
                clientId = Guid.NewGuid().ToString();
                Console.WriteLine($"Generated temporary client ID: {clientId}");
            }
        }

        try
        {
            // Set to submitting state
            buttonState = SubmitButtonState.Submitting;
            isSubmitting = true;
            
            // Update participant name if changed
            if (!string.IsNullOrEmpty(participantName))
            {
                await hubConnection.InvokeAsync("SetParticipantName", participantName);
            }
            
            // Submit response with client ID
            await QuestionApi.AddResponseAsync(
                activeQuestion.QuestionId,
                participantName,
                selectedOptionIds,
                comment,
                clientId);
            
            // Set to success state
            buttonState = SubmitButtonState.Success;
            
            // Reset to ready state after 3 seconds
            SetupStateResetTimer();
            
            // Mark as submitted and show responses
            hasSubmitted = true;
            showResponses = true;
            
            // Refresh to see updated responses
            await RefreshActiveQuestion();
            
            errorMessage = "";
        }
        catch (Exception ex)
        {
            // Set to error state
            buttonState = SubmitButtonState.Error;
            
            // Reset to ready state after 5 seconds
            SetupStateResetTimer(5000);
            
            errorMessage = $"Error submitting response: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Dispose timer
        stateResetTimer?.Dispose();
        
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    /// <summary>
    /// Helper method to get button style class
    /// </summary>
    private string GetButtonClass()
    {
        return buttonState switch
        {
            SubmitButtonState.Ready => "btn btn-primary",
            SubmitButtonState.Submitting => "btn btn-warning",
            SubmitButtonState.Success => "btn btn-success",
            SubmitButtonState.Error => "btn btn-danger",
            _ => "btn btn-primary"
        };
    }
    
    /// <summary>
    /// Helper method to get button animation class
    /// </summary>
    private string GetButtonAnimation()
    {
        return buttonState switch
        {
            SubmitButtonState.Ready => "",
            SubmitButtonState.Submitting => "submit-pulse submit-progress",
            SubmitButtonState.Success => "submit-success",
            SubmitButtonState.Error => "submit-error",
            _ => ""
        };
    }
    
    /// <summary>
    /// Helper method to set up state reset timer
    /// </summary>
    private void SetupStateResetTimer(int milliseconds = 3000)
    {
        // Clear existing timer
        stateResetTimer?.Dispose();
        
        // Set up new timer
        stateResetTimer = new Timer(_ => 
        {
            buttonState = SubmitButtonState.Ready;
            InvokeAsync(StateHasChanged);
        }, null, milliseconds, Timeout.Infinite);
    }
}